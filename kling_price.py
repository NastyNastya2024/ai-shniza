import os
import asyncio
import logging
import replicate
import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from sqlalchemy import select
from sqlalchemy.exc import NoResultFound
from database.db import async_session
from database.models import User, PaymentRecord

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ Replicate
replicate.api_token = REPLICATE_API_TOKEN

# FSM
class KlingVideoState(StatesGroup):
    waiting_image = State()
    waiting_mode = State()
    waiting_duration = State()
    waiting_prompt = State()
    confirm_pending = State()

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤ —Ü–µ–Ω—Ç–∞—Ö
KLING_PRICES = {
    ("standard", 5): 140,
    ("standard", 10): 275,
    ("pro", 5): 250,
    ("pro", 10): 495,
}

def calculate_kling_price(mode: str, duration: int) -> int:
    return KLING_PRICES.get((mode, duration), 0)

async def get_user_balance(user_id: int) -> int:
    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == user_id))
            user = result.scalars().one()
            return int(user.balance)
        except NoResultFound:
            return 0

async def deduct_user_balance(user_id: int, amount: int) -> bool:
    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == user_id))
            user = result.scalars().one()
            if user.balance >= amount:
                user.balance -= amount
                session.add(user)
                session.add(PaymentRecord(
                    user_id=user.id,
                    amount=amount,
                    payment_id=str(uuid.uuid4()),
                    status="succeeded"
                ))
                await session.commit()
                return True
            return False
        except NoResultFound:
            return False

# /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–∏–¥–µ–æ-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Kling**\n\n"
        "üé• –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ–æ.\n"
        "‚öôÔ∏è –†–µ–∂–∏–º—ã: Standard –∏ Pro\n"
        "‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 5 –∏–ª–∏ 10 —Å–µ–∫—É–Ω–¥\n"
        "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∂–∏–º–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.\n\n"
        "üìå –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è –≤–∏–¥–µ–æ."
    )
    await state.set_state(KlingVideoState.waiting_image)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def handle_image(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    await state.update_data(image_url=image_url)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéõ Standard", callback_data="mode_standard"),
            InlineKeyboardButton(text="üöÄ Pro", callback_data="mode_pro"),
        ]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
    await state.set_state(KlingVideoState.waiting_mode)

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
async def handle_mode_selection(callback: CallbackQuery, state: FSMContext):
    mode = callback.data.replace("mode_", "")
    await state.update_data(mode=mode)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è± 5 —Å–µ–∫", callback_data="duration_5"),
            InlineKeyboardButton(text="‚è± 10 —Å–µ–∫", callback_data="duration_10"),
        ]
    ])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=keyboard)
    await state.set_state(KlingVideoState.waiting_duration)
    await callback.answer()

# –í—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤–≤–æ–¥ prompt —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ)
async def handle_duration_selection(callback: CallbackQuery, state: FSMContext):
    duration = int(callback.data.replace("duration_", ""))
    await state.update_data(duration=duration)

    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    await state.set_state(KlingVideoState.waiting_prompt)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ prompt ‚Äî —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(prompt=prompt)
    data = await state.get_data()
    price = calculate_kling_price(data["mode"], data["duration"])
    balance = await get_user_balance(message.from_user.id)

    if balance < price:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: –Ω—É–∂–Ω–æ {price} —Ü–µ–Ω—Ç–æ–≤, —É –≤–∞—Å {balance}."
        )
        await state.clear()
        return

    await state.update_data(price=price)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_gen")]
    ])
    await message.answer(
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {price} —Ü–µ–Ω—Ç–æ–≤\nüíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ü–µ–Ω—Ç–æ–≤\n\n–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
        reply_markup=keyboard
    )
    await state.set_state(KlingVideoState.confirm_pending)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî —Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫
async def handle_confirm_generation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt", "")
    user_id = callback.from_user.id

    if not await deduct_user_balance(user_id, data["price"]):
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    await callback.message.edit_text("üé• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.")

    model_map = {
        ("standard", 5): "kwaivgi/kling-v2.1",
        ("standard", 10): "kwaivgi/kling-v2.2",
        ("pro", 5): "kwaivgi/kling-v2.3",
        ("pro", 10): "kwaivgi/kling-v2.4",
    }
    model_version = model_map.get((data["mode"], data["duration"]))

    try:
        prediction = await replicate.predictions.async_create(
            model=model_version,
            input={
                "mode": data["mode"],
                "prompt": prompt,
                "duration": data["duration"],
                "start_image": data["image_url"],
                "negative_prompt": ""
            }
        )
        while prediction.status not in ("succeeded", "failed"):
            await asyncio.sleep(3)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status == "succeeded":
            output = prediction.output
            video_url = output if isinstance(output, str) else next((url for url in output if isinstance(url, str)), None)
            if video_url:
                await callback.message.answer_video(video_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ.")
            else:
                await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ.")
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_image, StateFilter(KlingVideoState.waiting_image))
    dp.callback_query.register(handle_mode_selection, lambda c: c.data.startswith("mode_"), StateFilter(KlingVideoState.waiting_mode))
    dp.callback_query.register(handle_duration_selection, lambda c: c.data.startswith("duration_"), StateFilter(KlingVideoState.waiting_duration))
    dp.message.register(handle_prompt, StateFilter(KlingVideoState.waiting_prompt))
    dp.callback_query.register(handle_confirm_generation, lambda c: c.data == "confirm_gen", StateFilter(KlingVideoState.confirm_pending))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
