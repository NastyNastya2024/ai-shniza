import os
import asyncio
import logging
import replicate
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ Replicate
replicate.api_token = REPLICATE_API_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class VideoGenState(StatesGroup):
    waiting_image = State()
    waiting_prompt = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–∏–¥–µ–æ-–±–æ—Ç **Minimax** –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ–æ.\n\n"
        "üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî ~$1.2\n\n"
        "üìå –ù–∞—á–Ω–µ–º! –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–Ω–µ—Ç—Å—è –≤–∏–¥–µ–æ."
    )
    await state.set_state(VideoGenState.waiting_image)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def handle_image(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    await state.update_data(image_url=image_url)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –¥–ª—è –≤–∏–¥–µ–æ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).")
    await state.set_state(VideoGenState.waiting_prompt)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 10:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    image_url = data.get("image_url")

    if not image_url:
        await message.answer("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return

    await message.answer("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    try:
        prediction = await replicate.predictions.async_create(
            model="minimax/video-01-live",
            input={
                "prompt": prompt,
                "prompt_optimizer": True,
                "first_frame_image": image_url,
            }
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω prediction: {prediction.id}")

        while prediction.status not in ("succeeded", "failed"):
            logger.info(f"–°—Ç–∞—Ç—É—Å: {prediction.status} ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫...")
            await asyncio.sleep(5)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status == "succeeded":
            output_url = prediction.output
            if isinstance(output_url, str):
                await message.answer_video(output_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ.")
            else:
                await message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prediction.error}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Replicate:")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_image, StateFilter(VideoGenState.waiting_image))
    dp.message.register(handle_prompt, StateFilter(VideoGenState.waiting_prompt))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


