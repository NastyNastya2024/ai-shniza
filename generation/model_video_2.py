import logging
import fal_client
from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

class VideoGenStatesVeo3(StatesGroup):
    waiting_for_prompt = State()
    processing_video = State()
    video_ready = State()

async def start_veo3_generation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –¥–ª—è –º–æ–¥–µ–ª–∏ Veo 3 –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (—Ä—É—Å—Å–∫–∏–π –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å - –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Ç gpt):")
    await state.set_state(VideoGenStatesVeo3.waiting_for_prompt)
    logger.info("üü¢ FSM Veo3: –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç")

async def handle_veo3_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return
    await state.update_data(prompt=prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (Veo3)", callback_data="generate_video_veo3")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status_veo3")]
    ])
    await message.answer("üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await state.set_state(VideoGenStatesVeo3.processing_video)
    logger.info("üü¢ FSM Veo3: –æ–∂–∏–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è")

def on_queue_update(update):
    if isinstance(update, fal_client.InProgress):
        for log in update.logs:
            logger.info(f"Veo3 in-progress: {log['message']}")

async def generate_video_veo3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt")

    if not prompt:
        await callback.message.answer("‚ùå –ù–µ –≤–≤–µ–¥—ë–Ω –ø—Ä–æ–º–ø—Ç.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ —Å Veo 3. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º fal_client.subscribe –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
    import asyncio
    loop = asyncio.get_running_loop()
    try:
        result = await loop.run_in_executor(None, lambda: fal_client.subscribe(
            "fal-ai/veo3",
            arguments={
                "prompt": prompt,
                "aspect_ratio": "16:9",
                "duration": "8s",
                "enhance_prompt": True,
                "generate_audio": True
            },
            with_logs=True,
            on_queue_update=on_queue_update,
        ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Veo3: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ Veo3.")
        await state.clear()
        return

    video_url = None
    # –í —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—â–µ–º –≤–∏–¥–µ–æ
    if isinstance(result, dict):
        video_url = (
            result.get("video_url") or
            (result.get("video") and result["video"].get("url")) or
            (result.get("output") and result["output"].get("video"))
        )

    if video_url:
        await callback.message.answer_video(video_url, caption="üéâ –í–∏–¥–µ–æ Veo3 –≥–æ—Ç–æ–≤–æ!")
        await state.update_data(video_url=video_url)
        await state.set_state(VideoGenStatesVeo3.video_ready)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Veo3.")
        await state.clear()

async def check_status_veo3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    video_url = data.get("video_url")
    if video_url:
        await callback.message.answer_video(video_url, caption="‚úÖ –í–∏–¥–µ–æ Veo3 –≥–æ—Ç–æ–≤–æ.")
    else:
        await callback.message.answer("‚è≥ –í–∏–¥–µ–æ Veo3 –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ.")

def setup_veo3_handlers(dp: Dispatcher):
    dp.callback_query.register(start_veo3_generation, F.data == "vid_model_2")
    dp.message.register(handle_veo3_prompt, VideoGenStatesVeo3.waiting_for_prompt, F.text)
    dp.callback_query.register(generate_video_veo3, F.data == "generate_video_veo3", VideoGenStatesVeo3.processing_video)
    dp.callback_query.register(check_status_veo3, F.data == "check_status_veo3", VideoGenStatesVeo3.processing_video)

