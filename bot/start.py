from aiogram import types, Bot, Router
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from bot.invoice import create_invoice
from database.db import async_session
from database.models import User, PaymentRecord
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError

router = Router()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã ===
class PaymentState(StatesGroup):
    waiting_for_amount = State()

# === –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã ===
async def show_payment_options(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", callback_data="pay_yookassa")],
            [InlineKeyboardButton(text="üíµ –ü–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –†–æ–±–æ–ö–∞—Å—Å–∞", callback_data="pay_robokassa")]
        ]
    )

    text = (
        "üí° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É.\n"
        "‚ö†Ô∏è –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. \n\n"
        "üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
        "- ideogram-v2-turbo ‚Äî 9‚ÇΩ\n"
        "- imagen-4 ‚Äî 9‚ÇΩ\n"
        "- flux-kontext-pro ‚Äî 9‚ÇΩ\n"
        "- kwaivgi/kling-v2.1 ‚Äî 55‚ÇΩ\n"
        "- kwaivgi/kling-v2.2 ‚Äî 110‚ÇΩ\n"
        "- kwaivgi/kling-v2.3 ‚Äî 99‚ÇΩ\n"
        "- kwaivgi/kling-v2.4 ‚Äî 199‚ÇΩ\n\n"
        "üéûÔ∏è –í–∏–¥–µ–æ:\n"
        "- minimax / video-01-live ‚Äî 150‚ÇΩ\n"
        "- seedance-1-pro 480p/5—Å ‚Äî 80‚ÇΩ\n"
        "- seedance-1-pro 480p/10—Å ‚Äî 120‚ÇΩ\n"
        "- seedance-1-pro 1080p/5—Å ‚Äî 150‚ÇΩ\n"
        "- seedance-1-pro 1080p/10—Å ‚Äî 250‚ÇΩ\n"
        "- google / veo-3 (8—Å) ‚Äî 660‚ÇΩ\n\n"
        "üéµ –ê—É–¥–∏–æ:\n"
        "- minimax/music-01 ‚Äî 9‚ÇΩ\n"
        "- meta/musicgen ‚Äî 9‚ÇΩ\n\n"
        "üß† –¢–µ–∫—Å—Ç:\n"
        "- GPT ‚Äî 0‚ÇΩ/ 300 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- Chatterbox ‚Äî 9‚ÇΩ / 1000 —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "‚ö†Ô∏è –ü–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–µ—Å—ë—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –ò–ò-—Å–µ—Ä–≤–∏—Å–∞–º–∏."
    )

    await message.answer(text, reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ÆKassa ===
@router.callback_query(lambda c: c.data == "pay_yookassa")
async def handle_yookassa_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):")
    await state.set_state(PaymentState.waiting_for_amount)
    await callback.answer()

# === –ü—Ä–∏—ë–º —Å—É–º–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@router.message(PaymentState.waiting_for_amount)
async def process_amount_input(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 10:
            await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 10‚ÇΩ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        invoice = create_invoice(
            chat_id=message.chat.id,
            amount=int(amount * 100),
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount:.2f} ‚ÇΩ"
        )

        await message.bot.send_invoice(**invoice)
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 150")
    except Exception as e:
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
        import logging
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞")

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã ===
@router.pre_checkout_query()
async def checkout(pre_checkout_q: types.PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ===
@router.message(lambda message: message.successful_payment)
async def success_payment(message: types.Message):
    payment = message.successful_payment
    amount_rub = payment.total_amount / 100
    payment_id = payment.provider_payment_charge_id
    tg_id = message.from_user.id
    username = message.from_user.username or "unknown"

    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == tg_id))
            user = result.scalar_one_or_none()

            if user is None:
                user = User(telegram_id=tg_id, username=username, balance=amount_rub)
                session.add(user)
                await session.flush()
            else:
                user.balance += amount_rub

            payment_record = PaymentRecord(
                user_id=user.id,
                amount=amount_rub,
                payment_id=payment_id,
                status="succeeded"
            )
            session.add(payment_record)

            await session.commit()

            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!\n"
                f"üí∏ –°—É–º–º–∞: {amount_rub:.2f} {payment.currency}\n"
                f"üßæ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ"
            )

        except SQLAlchemyError:
            await session.rollback()
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            import logging
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
