from aiogram import types, Bot, Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot.invoice import create_invoice
from database.db import async_session
from database.models import User, PaymentRecord
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
import logging
import json

router = Router()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def show_payment_options(message: Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
        user = result.scalar_one_or_none()
        balance = float(user.balance) if user else 0.0

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 100 ‚ÇΩ", callback_data="pay_100")],
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 500 ‚ÇΩ", callback_data="pay_500")],
            [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ 1000 ‚ÇΩ", callback_data="pay_1000")],
            [InlineKeyboardButton(text="üíº –°–≤–æ—è —Å—É–º–º–∞ (–æ—Ç 100 ‚ÇΩ)", callback_data="pay_custom")]
        ]
    )

    text = (
        f"üíº –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n\n"
        "üí° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É –æ—Ç 100‚ÇΩ.\n"
        "‚ö†Ô∏è –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Ñ–∞–∫—Ç—É —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n\n"
         f"üñº *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*\n"
        f"- Ideogram ‚Äî –æ—Ç 9 ‚ÇΩ\n"
        f"- Imagen-4 ‚Äî –æ—Ç 9 ‚ÇΩ\n"
        f"- FluxKontext ‚Äî –æ—Ç 9 ‚ÇΩ\n\n"

        f"üé¨ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ:*\n"
        f"- Kling v2.1 ‚Äî –æ—Ç 55 - 199 ‚ÇΩ\n"
        f"- Minimax Video ‚Äî –æ—Ç 150 ‚ÇΩ\n"
        f"- Seedance  ‚Äî –æ—Ç 80 ‚ÇΩ\n"
        f"- Veo3 (8 —Å–µ–∫—É–Ω–¥) ‚Äî  660 ‚ÇΩ\n\n"

        f"üéµ *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏:*\n"
        f"- Minimax Music ‚Äî –æ—Ç 9 ‚ÇΩ\n"
        f"- MusicGen ‚Äî 9 ‚ÇΩ\n"
        f"- Chatterbox ‚Äî 9 ‚ÇΩ\n\n"

        f"üí¨ *–¢–µ–∫—Å—Ç –∏ —Ä–µ—á—å:*\n"
        f"- GPT –ø–µ—Ä–µ–≤–æ–¥ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:"
    )

    await message.answer(text, reply_markup=keyboard)
    
@router.callback_query(lambda c: c.data.startswith("pay_") and c.data != "pay_custom")
async def handle_fixed_payment(callback: CallbackQuery):
    try:
        amount_str = callback.data.split("_")[1]
        amount = int(amount_str)

        invoice = create_invoice(
            chat_id=callback.message.chat.id,
            amount=amount * 100,  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} ‚ÇΩ"
        )

        invoice_for_log = invoice.copy()
        invoice_for_log["prices"] = [{"label": p.label, "amount": p.amount} for p in invoice["prices"]]
        logging.debug("–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å (fixed): %s", json.dumps(invoice_for_log, indent=2, ensure_ascii=False))

        await callback.message.bot.send_invoice(**invoice)
        await callback.answer()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞")
        await callback.message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        

@router.message()
async def handle_custom_amount_input(message: Message):


    amount = int(text)
    if amount < 100:
        await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        invoice = create_invoice(
            chat_id=message.chat.id,
            amount=amount * 100,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} ‚ÇΩ"
        )

        invoice_for_log = invoice.copy()
        invoice_for_log["prices"] = [{"label": p.label, "amount": p.amount} for p in invoice["prices"]]
        logging.debug("–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å (custom): %s", json.dumps(invoice_for_log, indent=2, ensure_ascii=False))

        await message.bot.send_invoice(**invoice)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ (custom)")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤–æ—è —Å—É–º–º–∞"
@router.callback_query(lambda c: c.data == "pay_custom")
async def handle_custom_amount_request(callback: CallbackQuery):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 100 ‚ÇΩ):")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@router.message()
async def handle_custom_amount_input(message: Message):
    
    amount = int(message.text.strip())
    if amount < 100:
        await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 100 ‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        invoice = create_invoice(
            chat_id=message.chat.id,
            amount=amount * 100,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} ‚ÇΩ"
        )

        invoice_for_log = invoice.copy()
        invoice_for_log["prices"] = [{"label": p.label, "amount": p.amount} for p in invoice["prices"]]
        logging.debug("–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å (custom): %s", json.dumps(invoice_for_log, indent=2, ensure_ascii=False))

        await message.bot.send_invoice(**invoice)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ (custom)")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û—Ç–≤–µ—Ç –ÆKassa –Ω–∞ pre_checkout –∑–∞–ø—Ä–æ—Å
@router.pre_checkout_query()
async def checkout(pre_checkout_q: types.PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

# –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
@router.message(lambda message: message.successful_payment)
async def success_payment(message: types.Message):
    payment = message.successful_payment
    amount_rub = payment.total_amount / 100
    payment_id = payment.provider_payment_charge_id
    tg_id = message.from_user.id
    username = message.from_user.username or "unknown"

    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == tg_id))
            user = result.scalar_one_or_none()

            if user is None:
                user = User(telegram_id=tg_id, username=username, balance=amount_rub)
                session.add(user)
                await session.flush()
            else:
                user.balance += amount_rub

            session.add(PaymentRecord(
                user_id=user.id,
                amount=amount_rub,
                payment_id=payment_id,
                status="succeeded"
            ))

            await session.commit()

            await message.answer(
                f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!\n"
                f"üí∏ –°—É–º–º–∞: {amount_rub:.2f} {payment.currency}\n"
                f"üßæ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n"
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance:.2f} ‚ÇΩ"
            )

        except SQLAlchemyError:
            await session.rollback()
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
