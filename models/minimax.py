import os
import asyncio
import logging
import uuid
import replicate

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy import select
from dotenv import load_dotenv

from database.db import async_session
from database.models import User, PaymentRecord

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_API_TOKEN:
    raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

replicate.api_token = REPLICATE_API_TOKEN
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("minimax")

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class VideoGenState(StatesGroup):
    waiting_image = State()
    waiting_prompt = State()
    confirming_payment = State()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
def calculate_minimax_price() -> float:
    return 150.0  # —Ä—É–±–ª–∏

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def get_user_balance(user_id: int) -> float:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if not user:
            user = User(telegram_id=user_id, balance=0)
            session.add(user)
            await session.commit()
            return 0.0
        return float(user.balance)

# –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
async def deduct_user_balance(user_id: int, amount: float) -> bool:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if user and user.balance >= amount:
            user.balance -= amount
            session.add(user)
            session.add(PaymentRecord(
                user_id=user.id,
                amount=amount,
                payment_id=str(uuid.uuid4()),
                status="succeeded"
            ))
            await session.commit()
            return True
        return False

# /start
async def minimax_start(message: Message, state: FSMContext):
    await state.clear()
    price = calculate_minimax_price()
    await message.answer(
        f"üé• *Minimax Video Bot* ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
        f"‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ*\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\n\n"
        f"üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        parse_mode="Markdown"
    )
    await state.set_state(VideoGenState.waiting_image)

# –ü—Ä–∏—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def minimax_handle_image(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    await state.update_data(image_url=image_url)
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).")
    await state.set_state(VideoGenState.waiting_prompt)

# –ü—Ä–∏—ë–º –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
async def minimax_handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 10:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_id = message.from_user.id
    price = calculate_minimax_price()
    balance = await get_user_balance(user_id)

    if balance < price:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ"
        )
        await state.clear()
        return

    await state.update_data(prompt=prompt, price=price)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞ {price:.2f} ‚ÇΩ", callback_data="confirm_generation")]
    ])
    await message.answer(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\nüíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ",
        reply_markup=kb
    )
    await state.set_state(VideoGenState.confirming_payment)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
async def minimax_confirm_generation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    user_id = callback.from_user.id
    prompt = data.get("prompt")
    image_url = data.get("image_url")
    price = data.get("price")

    if not (prompt and image_url and price):
        await callback.message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
        await state.clear()
        return

    if not await deduct_user_balance(user_id, price):
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1-2 –º–∏–Ω—É—Ç.")

    try:
        prediction = await replicate.predictions.async_create(
            model="minimax/video-01-live",
            input={
                "prompt": prompt,
                "prompt_optimizer": True,
                "first_frame_image": image_url,
            }
        )
        logger.info(f"[Minimax] Prediction ID: {prediction.id}")

        while prediction.status not in ("succeeded", "failed"):
            await asyncio.sleep(5)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status == "succeeded":
            video_url = prediction.output
            if isinstance(video_url, str):
                await callback.message.answer_video(video_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –≤–∞—à–µ –≤–∏–¥–µ–æ.")
            else:
                await callback.message.answer("‚ö†Ô∏è –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")
        else:
            logger.error(f"[Minimax] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prediction.error}")
            await callback.message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(minimax_start, Command("start"))
    dp.message.register(minimax_handle_image, StateFilter(VideoGenState.waiting_image))
    dp.message.register(minimax_handle_prompt, StateFilter(VideoGenState.waiting_prompt))
    dp.callback_query.register(minimax_confirm_generation, StateFilter(VideoGenState.confirming_payment), lambda c: c.data == "confirm_generation")

    logger.info("Minimax –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
