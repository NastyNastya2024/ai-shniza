import os
import logging
import asyncio
import random

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

import replicate
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger("tg_bot")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class FluxKontextState(StatesGroup):
    WAITING_IMAGE = State()
    WAITING_ASPECT_RATIO = State()
    WAITING_PROMPT = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def flux_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")],
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def back_main_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

# --- –ù–æ–≤—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä ---
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    try:
        photo = FSInputFile("welcome.jpg")
        await message.answer_photo(photo, caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flux Kontext!")
    except Exception as e:
        logger.warning(f"[cmd_start] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flux Kontext!")

    text = (
        "üé¨ *Cartoon Video Bot* –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Flux Kontext** ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
        "üìã *–ß—Ç–æ —É–º–µ–µ—Ç:*\n"
        "- –ú—É–ª—å—Ç—è—à–Ω—ã–µ —Å—Ç–∏–ª–∏ (Pixar, Anime, Disney –∏ –¥—Ä.)\n"
        "- –ö–∞–º–µ—Ä–∞, –¥–≤–∏–∂–µ–Ω–∏–µ, —Å—é–∂–µ—Ç\n"
        "- –§–æ–Ω—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –ü—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "- üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$1.2 –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=back_main_menu_kb())
    await message.answer("üìå –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.")
    await state.set_state(FluxKontextState.WAITING_IMAGE)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º Aspect Ratio ---
async def handle_image_flux(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return

    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=back_main_menu_kb())
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    await state.update_data(image_url=image_url)

    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="1:1", callback_data="aspect_1_1"),
        InlineKeyboardButton(text="16:9", callback_data="aspect_16_9"),
        InlineKeyboardButton(text="9:16", callback_data="aspect_9_16")
    )
    await message.answer("üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (Aspect Ratio):", reply_markup=kb.as_markup())
    await state.set_state(FluxKontextState.WAITING_ASPECT_RATIO)

# --- –í—ã–±–æ—Ä Aspect Ratio ---
async def handle_aspect_ratio(callback: CallbackQuery, state: FSMContext):
    aspect_raw = callback.data.replace("aspect_", "")
    aspect = aspect_raw.replace("_", ":")
    await state.update_data(aspect_ratio=aspect, safety_tolerance=3)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞–∫—Å–∏–º—É–º

    await callback.message.edit_text("‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –≤—ã–±—Ä–∞–Ω–æ. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π...")
    await callback.answer()

    await handle_flux_style(callback.message, state)

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π ---
async def handle_flux_style(message: Message, state: FSMContext):
    cartoon_styles = [
        "90s Arcade Style", "Disney Style", "Tim Burton Style", "Pixar Toy Look",
        "Sci-Fi Animation", "Anime Fantasy", "Animal Cartoon",
        "Dark Comic", "Noir Detective", "Studio Ghibli\n\n",
        "üìù *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞:*\n"
        "_Make this a 90s cartoon_"
    ]
    style_list = "\n".join(f"- {s}" for s in cartoon_styles)

    await message.answer(
        f"‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (prompt).\n\n"
        f"*–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π:*\n{style_list}",
        parse_mode="Markdown",
        reply_markup=back_main_menu_kb()
    )
    await state.set_state(FluxKontextState.WAITING_PROMPT)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
async def handle_prompt(message: Message, state: FSMContext):
    if message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await cmd_start(message, state)
        return

    if message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é":
        await cmd_start(message, state)
        return

    prompt = message.text.strip()
    data = await state.get_data()
    image_url = data.get("image_url")
    aspect_ratio = data.get("aspect_ratio", "match_input_image")
    safety_tolerance = data.get("safety_tolerance", 3)

    if not image_url:
        await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        seed = random.randint(0, 2**31 - 1)
        prediction = client.predictions.create(
            version="black-forest-labs/flux-kontext-pro",
            input={
                "prompt": prompt,
                "input_image": image_url,
                "aspect_ratio": aspect_ratio,
                "output_format": "jpg",
                "safety_tolerance": safety_tolerance,
                "seed": seed
            }
        )
        logger.info(f"[handle_prompt] Prediction created: {prediction.id}")
        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction.reload()
            logger.info(f"[handle_prompt] Status: {prediction.status}")
        if prediction.status == "succeeded" and prediction.output:
            output = prediction.output
            logger.info(f"[handle_prompt] Output: {output}")
            if isinstance(output, str) and output.startswith(("http://", "https://")):
                image_result_url = output
            elif isinstance(output, list) and output and isinstance(output[0], str) and output[0].startswith(("http://", "https://")):
                image_result_url = output[0]
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –º–æ–¥–µ–ª–∏: {output}")
            await message.answer_photo(
                image_result_url,
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\nüî§ *Prompt:* {prompt}",
                parse_mode="Markdown",
                reply_markup=flux_menu_kb()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=flux_menu_kb())
            logger.error(f"[handle_prompt] Generation failed. Status: {prediction.status}, Output: {prediction.output}")
    except Exception:
        logger.exception("[handle_prompt] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=flux_menu_kb())

    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_image_flux, StateFilter(FluxKontextState.WAITING_IMAGE))
    dp.callback_query.register(handle_aspect_ratio, StateFilter(FluxKontextState.WAITING_ASPECT_RATIO))
    dp.message.register(handle_prompt, StateFilter(FluxKontextState.WAITING_PROMPT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
