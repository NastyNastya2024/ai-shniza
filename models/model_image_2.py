import logging
import requests
import fal_client
from aiogram import F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Dispatcher

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ImageGen2States(StatesGroup):
    waiting_for_image = State()
    waiting_for_prompt = State()
    processing_image = State()
    image_ready = State()

async def start_image_generation_2(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    await state.set_state(ImageGen2States.waiting_for_image)
    logger.info("üü¢ FSM: –û–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def handle_photo(message: types.Message, state: FSMContext):
    logger.info("üì• –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file.file_path}"
    logger.info(f"üì§ –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL: {file_url}")

    try:
        response = requests.get(file_url)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ fal_client (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞, –ª–∏–±–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º URL)
    # fal_client.upload_file –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞–¥–æ

    await state.update_data(image_url=file_url)
    await message.answer("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt).")
    await state.set_state(ImageGen2States.waiting_for_prompt)
    logger.info(f"üìå FSM –ø–µ—Ä–µ—à—ë–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {ImageGen2States.waiting_for_prompt}")

async def handle_prompt(message: types.Message, state: FSMContext):
    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return

    await state.update_data(prompt=prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñº –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image_2")],
    ])
    await message.answer("üìã –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=keyboard)
    await state.set_state(ImageGen2States.processing_image)

async def generate_image_2(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt")
    image_url = data.get("image_url")

    if not prompt or not image_url:
        await callback.message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ fal_client
    def on_queue_update(update):
        if isinstance(update, fal_client.InProgress):
            for log in update.logs:
                logger.info(f"FAL log: {log['message']}")

    try:
        result = fal_client.subscribe(
            "fal-ai/flux-pro/v1.1-ultra",
            arguments={
                "prompt": prompt,
                "image_url": image_url,
                "num_images": 1,
                "enable_safety_checker": True,
                "safety_tolerance": "2",
                "output_format": "jpeg",
                "aspect_ratio": "16:9"
            },
            with_logs=True,
            on_queue_update=on_queue_update,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await state.clear()
        return

    if result and "images" in result and result["images"]:
        img_url = result["images"][0]["url"]
        await callback.message.answer_photo(img_url, caption="üéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        await state.update_data(generated_image_url=img_url)
        await state.set_state(ImageGen2States.image_ready)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await state.clear()

def setup_imagegen2_handlers(dp: Dispatcher):
    dp.callback_query.register(start_image_generation_2, F.data == "img_model_2")
    dp.message.register(handle_photo, ImageGen2States.waiting_for_image, F.photo)
    dp.message.register(handle_prompt, ImageGen2States.waiting_for_prompt, F.text)
    dp.callback_query.register(generate_image_2, F.data == "generate_image_2", ImageGen2States.processing_image)

