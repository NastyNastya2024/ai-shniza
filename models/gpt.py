import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from keyboards import main_menu_kb, MAIN_MENU_BUTTON_TEXT

import replicate

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class PromptTranslationState(StatesGroup):
    WAITING_RU_PROMPT = State()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(PromptTranslationState.WAITING_RU_PROMPT)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:\n\n"
        "üíº –ü–µ—Ä–µ–≤–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π:\n"
        "üî§ –ù–∞–∂–º–∏—Ç–µ /main —á—Ç–æ–±—ã –≤—ã–π—Ç–∏",
    )

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def go_main_menu(message: Message, state: FSMContext):
    logging.info(f"[MainMenu] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {message.text}")
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kb())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ Replicate ---
async def handle_russian_prompt(message: Message, state: FSMContext):
    user_input = message.text.strip()

    if user_input == MAIN_MENU_BUTTON_TEXT:
        await go_main_menu(message, state)
        return
    

    await message.answer("‚è≥ –ü–µ—Ä–µ–≤–æ–∂—É...")

    try:
        client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        output = client.run(
            "openai/gpt-4.1-nano",
            input={
                "prompt": f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {user_input}",
                "top_p": 1,
                "temperature": 1,
                "system_prompt": "You are a helpful assistant.",
                "presence_penalty": 0,
                "frequency_penalty": 0,
                "max_completion_tokens": 4096
            }
        )

        translated_prompt = "".join(output).strip()
        await message.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥:")
        await message.answer(translated_prompt)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Replicate API")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
