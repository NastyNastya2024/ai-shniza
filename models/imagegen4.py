import os
import logging
import asyncio
import uuid

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import replicate
from dotenv import load_dotenv

from sqlalchemy import select
from database.db import async_session
from database.models import User, PaymentRecord

from keyboards import main_menu_kb, MAIN_MENU_BUTTON_TEXT

# --- Init ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("imagegen4")

# --- FSM ---
class ImageGenState(StatesGroup):
    AWAITING_ASPECT = State()
    AWAITING_PROMPT = State()
    CONFIRM_GENERATION = State()

# --- Pricing ---
def calculate_imagegen4_price() -> float:
    return 10.0

# --- Balance logic ---
async def get_user_balance(user_id: int) -> float:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if not user:
            user = User(telegram_id=user_id, balance=0)
            session.add(user)
            await session.commit()
            return 0.0
        return float(user.balance)

async def deduct_user_balance(user_id: int, amount: float) -> bool:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if user and user.balance >= amount:
            user.balance -= amount
            session.add(user)
            session.add(PaymentRecord(
                user_id=user.id,
                amount=amount,
                payment_id=str(uuid.uuid4()),
                status="succeeded"
            ))
            await session.commit()
            return True
        return False

# --- Keyboards ---
def aspect_ratio_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1:1", callback_data="aspect_1:1"),
            InlineKeyboardButton(text="9:16", callback_data="aspect_9:16"),
            InlineKeyboardButton(text="16:9", callback_data="aspect_16:9"),
        ]
    ])

# --- Handlers ---
async def cmd_start_imagegen4(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üñº Google Imagen 4 ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        f"‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {calculate_imagegen4_price():.2f} ‚ÇΩ\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:",
        parse_mode="Markdown",
        reply_markup=aspect_ratio_kb()
    )
    await state.set_state(ImageGenState.AWAITING_ASPECT)

async def go_main_menu_imagegen4(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kb())

async def aspect_imagegen4(callback: CallbackQuery, state: FSMContext):
    aspect_value = callback.data.split("_")[1]
    await state.update_data(aspect_ratio=aspect_value)
    await callback.message.edit_reply_markup()
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –º–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ImageGenState.AWAITING_PROMPT)
    await callback.answer()

async def handle_prompt_imagegen4(message: Message, state: FSMContext):
    text = message.text.strip()
    user_id = message.from_user.id

    if len(text) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    price = calculate_imagegen4_price()
    balance = await get_user_balance(user_id)

    if balance < price:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")
        await state.clear()
        return

    await state.update_data(prompt=text, price=price)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generation_imagegen4")]
    ])
    await message.answer(
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\n–ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:",
        reply_markup=kb
    )
    await state.set_state(ImageGenState.CONFIRM_GENERATION)

async def confirm_generation_imagegen4(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id

    if not await deduct_user_balance(user_id, data["price"]):
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        replicate.api_token = REPLICATE_API_TOKEN
        prediction = await replicate.predictions.async_create(
            model="google/imagen-4",
            input={
                "prompt": data["prompt"],
                "aspect_ratio": data.get("aspect_ratio", "9:16"),
                "output_format": "png",
                "safety_filter_level": "block_medium_and_above",
                "guidance_scale": 7.5,
                "num_inference_steps": 50
            }
        )

        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status != "succeeded" or not prediction.output:
            raise RuntimeError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")

        image_url = prediction.output[0] if isinstance(prediction.output, list) else prediction.output
        await callback.message.answer_photo(image_url, caption=f"‚úÖ Prompt: {data['prompt']}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

    await state.clear()

# --- Main ---
async def main():
    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start_imagegen4, Command("start"))
    dp.callback_query.register(aspect_imagegen4, F.data.startswith("aspect_"), StateFilter(ImageGenState.AWAITING_ASPECT))
    dp.message.register(handle_prompt_imagegen4, StateFilter(ImageGenState.AWAITING_PROMPT))
    dp.callback_query.register(confirm_generation_imagegen4, F.data == "confirm_generation_imagegen4", StateFilter(ImageGenState.CONFIRM_GENERATION))
    dp.message.register(go_main_menu_imagegen4, F.text == MAIN_MENU_BUTTON_TEXT)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
