import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import replicate
from dotenv import load_dotenv

from keyboards import main_menu_kb, MAIN_MENU_BUTTON_TEXT

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger("tg_bot")

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class ImageGenState(StatesGroup):
    AWAITING_ASPECT = State()
    AWAITING_PROMPT = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è ---
def aspect_ratio_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1:1", callback_data="aspect_1:1"),
            InlineKeyboardButton(text="9:16", callback_data="aspect_9:16"),
            InlineKeyboardButton(text="16:9", callback_data="aspect_16:9"),
        ]
    ])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–≤—Ç–æ—Ä/–º–µ–Ω—é ---
def imagegen_menu_kb():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")],
        [KeyboardButton(text=MAIN_MENU_BUTTON_TEXT)]
    ], resize_keyboard=True)

# --- /start ---
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    logger.info(f"[cmd_start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /start")

    welcome_text = (
        "üñº Google Imagen 4 ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –ü—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "- –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "- üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n"
        "‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:"
    )

    await message.answer(welcome_text, parse_mode="Markdown", reply_markup=aspect_ratio_kb())
    await state.set_state(ImageGenState.AWAITING_ASPECT)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def go_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kb())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω ---
async def aspect_imagegen4(callback: CallbackQuery, state: FSMContext):
    aspect_value = callback.data.split("_")[1]
    await state.update_data(aspect_ratio=aspect_value)
    logger.info(f"[aspect_imagegen4] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∞—Å–ø–µ–∫—Ç {aspect_value}")

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç) –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤):", reply_markup=imagegen_menu_kb())
    await state.set_state(ImageGenState.AWAITING_PROMPT)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ ---
async def handle_prompt(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é":
        await cmd_start(message, state)
        return

    if text == MAIN_MENU_BUTTON_TEXT:
        await go_main_menu(message, state)
        return

    user_id = message.from_user.id
    logger.info(f"[handle_prompt] –ü—Ä–æ–º–ø—Ç –æ—Ç {user_id}: {text}")

    if len(text) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=imagegen_menu_kb())
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", reply_markup=imagegen_menu_kb())

    data = await state.get_data()
    aspect_ratio = data.get("aspect_ratio", "9:16")

    try:
        replicate.api_token = REPLICATE_API_TOKEN

        prediction = await replicate.predictions.async_create(
            model="google/imagen-4",
            input={
                "prompt": text,
                "aspect_ratio": aspect_ratio,
                "output_format": "png",
                "safety_filter_level": "block_medium_and_above",
                "guidance_scale": 7.5,
                "num_inference_steps": 50
            }
        )

        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)
            logger.debug(f"[handle_prompt] –û–∂–∏–¥–∞–Ω–∏–µ... —Å—Ç–∞—Ç—É—Å: {prediction.status}")

        if prediction.status == "failed":
            raise RuntimeError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")

        output = prediction.output
        if isinstance(output, list) and output:
            image_url = output[0]
        elif isinstance(output, str):
            image_url = output
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç output")

        logger.info(f"[handle_prompt] –£—Å–ø–µ—à–Ω–æ: {image_url}")
        await message.answer_photo(image_url, caption=f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:\n{text}", reply_markup=imagegen_menu_kb())

    except Exception as e:
        logger.exception(f"[handle_prompt] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=imagegen_menu_kb())

    await state.clear()

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(aspect_imagegen4, F.data.startswith("aspect_"), StateFilter(ImageGenState.AWAITING_ASPECT))
    dp.message.register(handle_prompt, StateFilter(ImageGenState.AWAITING_PROMPT))
    dp.message.register(go_main_menu, F.text == MAIN_MENU_BUTTON_TEXT)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
