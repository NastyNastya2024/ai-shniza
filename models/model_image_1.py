import logging
import requests
import fal_client
import asyncio
import os

from aiogram import F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Dispatcher

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
IMGBB_API_KEY = os.getenv("IMGBB_API_KEY")

class ImageGenStates(StatesGroup):
    waiting_for_image = State()
    waiting_for_prompt = State()
    processing_image = State()
    image_ready = State()

async def start_image_generation_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    await state.set_state(ImageGenStates.waiting_for_image)
    logger.info("üü¢ FSM (ImageGen1): –û–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

async def handle_photo_imagegen1(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    logger.info(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —Å: {file_url}")

    try:
        response = requests.get(file_url)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    try:
        upload = requests.post(
            "https://api.imgbb.com/1/upload",
            params={"key": IMGBB_API_KEY},
            files={"image": response.content}
        )
        upload.raise_for_status()
        image_url = upload.json()["data"]["url"]
        logger.info(f"‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ imgbb: {image_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ imgbb: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    await state.update_data(image_url=image_url)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.")
    await state.set_state(ImageGenStates.waiting_for_prompt)

async def handle_prompt_imagegen1(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return

    await state.update_data(prompt=prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_image_1")]
    ])
    await message.answer("üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await state.set_state(ImageGenStates.processing_image)

async def generate_image_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt")
    image_url = data.get("image_url")

    if not prompt or not image_url:
        await callback.message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    # –í—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
    result_url = await asyncio.to_thread(generate_fluxpro_image_sync, prompt, image_url)

    if result_url:
        await callback.message.answer_photo(result_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
        await state.set_state(ImageGenStates.image_ready)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await state.clear()

def on_queue_update(update):
    if isinstance(update, fal_client.InProgress) and update.logs:
        for log in update.logs:
            logger.info(f"FAL Log: {log['message']}")

def generate_fluxpro_image_sync(prompt: str, image_url: str) -> str | None:
    try:
        result = fal_client.subscribe(
            "fal-ai/flux-pro/kontext",
            arguments={
                "prompt": prompt,
                "guidance_scale": 3.5,
                "num_images": 1,
                "safety_tolerance": "2",
                "output_format": "jpeg",
                "image_url": image_url
            },
            with_logs=True,
            on_queue_update=on_queue_update
        )

        logger.info(f"Result from fal_client.subscribe: {result}")

        images = result.get("images")
        if images and isinstance(images, list) and len(images) > 0:
            return images[0].get("url")

        return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def setup_imagegen1_handlers(dp: Dispatcher):
    dp.message.register(handle_photo_imagegen1, ImageGenStates.waiting_for_image, F.photo)
    dp.message.register(handle_prompt_imagegen1, ImageGenStates.waiting_for_prompt, F.text)
    dp.callback_query.register(generate_image_1, F.data == "generate_image_1", ImageGenStates.processing_image)

