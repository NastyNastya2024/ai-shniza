import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import replicate
from dotenv import load_dotenv

from keyboards import main_menu_kb, MAIN_MENU_BUTTON_TEXT

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
REGENERATE_BUTTON_TEXT = "üîÅ –ù–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("tg_bot")

# --- FSM ---
class IdeogramImageGenState(StatesGroup):
    SELECTING_ASPECT = State()
    SELECTING_STYLE = State()
    AWAITING_PROMPT = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
def ideogram_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=REGENERATE_BUTTON_TEXT)],
        [KeyboardButton(text=MAIN_MENU_BUTTON_TEXT)]
    ], resize_keyboard=True)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è ---
def aspect_ratio_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1:1", callback_data="ideogram_aspect_1:1"),
            InlineKeyboardButton(text="9:16", callback_data="ideogram_aspect_2:3"),
            InlineKeyboardButton(text="16:9", callback_data="ideogram_aspect_16:9"),
        ]
    ])

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è ---
def style_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Auto", callback_data="ideogram_style_auto"),
            InlineKeyboardButton(text="General", callback_data="ideogram_style_general"),
            InlineKeyboardButton(text="Anime", callback_data="ideogram_style_anime"),
        ],
        [
            InlineKeyboardButton(text="Realistic", callback_data="ideogram_style_realistic"),
            InlineKeyboardButton(text="Design", callback_data="ideogram_style_design"),
            InlineKeyboardButton(text="Render 3D", callback_data="ideogram_style_render3d"),
        ]
    ])

# --- –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ---
async def ideogram_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üñº Ideogram V2 Turbo ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω\n"
        "- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –ü—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "- üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–∏–ª–∏ —É–∫–∞–∂–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–Ω–æ)",
        parse_mode="Markdown"
    )
    await state.set_state(IdeogramImageGenState.SELECTING_ASPECT)
    await message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω:", reply_markup=aspect_ratio_kb())

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
async def go_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üè† –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kb())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
async def handle_control_buttons(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == REGENERATE_BUTTON_TEXT:
        await ideogram_start(message, state)
    elif text == MAIN_MENU_BUTTON_TEXT:
        await go_main_menu(message, state)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è ---
async def handle_aspect_ideogram(callback: CallbackQuery, state: FSMContext):
    aspect = callback.data.replace("ideogram_aspect_", "")
    await state.update_data(aspect_ratio=aspect)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {aspect}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:",
        reply_markup=style_type_kb()
    )
    await state.set_state(IdeogramImageGenState.SELECTING_STYLE)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è ---
async def handle_style_aspect_ideogram(callback: CallbackQuery, state: FSMContext):
    style = callback.data.replace("ideogram_style_", "")
    await state.update_data(style=style)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        f"‚úÖ –°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω: {style}\n\n‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:",
        reply_markup=ideogram_menu_kb()
    )
    await state.set_state(IdeogramImageGenState.AWAITING_PROMPT)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ prompt ---
async def handle_prompt_aspect_ideogram(message: Message, state: FSMContext):
    text = message.text.strip()

    if text == REGENERATE_BUTTON_TEXT:
        await ideogram_start(message, state)
        return

    if text == MAIN_MENU_BUTTON_TEXT:
        await go_main_menu(message, state)
        return

    if len(text) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=ideogram_menu_kb())
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", reply_markup=ideogram_menu_kb())
    data = await state.get_data()
    aspect = data.get("aspect_ratio", "1:1")
    style = data.get("style", "auto")

    try:
        replicate.api_token = REPLICATE_API_TOKEN

        prediction = await replicate.predictions.async_create(
            model="ideogram-ai/ideogram-v2-turbo",
            input={
                "prompt": text,
                "aspect_ratio": aspect,
                "style": style
            }
        )

        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status != "succeeded" or not prediction.output:
            raise RuntimeError("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

        image_url = prediction.output[0] if isinstance(prediction.output, list) else prediction.output
        await message.answer_photo(image_url, caption=f"‚úÖ Prompt: {text}", reply_markup=ideogram_menu_kb())

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", reply_markup=ideogram_menu_kb())

    await state.clear()

# --- –ó–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) ---
async def main():
    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(ideogram_start, Command("start"))
    dp.callback_query.register(handle_aspect_ideogram, F.data.startswith("ideogram_aspect_"), StateFilter(IdeogramImageGenState.SELECTING_ASPECT))
    dp.callback_query.register(handle_style_aspect_ideogram, F.data.startswith("ideogram_style_"), StateFilter(IdeogramImageGenState.SELECTING_STYLE))
    dp.message.register(handle_prompt_aspect_ideogram, StateFilter(IdeogramImageGenState.AWAITING_PROMPT))

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö
    dp.message.register(handle_control_buttons, F.text.in_({REGENERATE_BUTTON_TEXT, MAIN_MENU_BUTTON_TEXT}))
    dp.message.register(handle_control_buttons, StateFilter(IdeogramImageGenState.SELECTING_ASPECT))
    dp.message.register(handle_control_buttons, StateFilter(IdeogramImageGenState.SELECTING_STYLE))
    dp.message.register(handle_control_buttons, StateFilter(IdeogramImageGenState.AWAITING_PROMPT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
