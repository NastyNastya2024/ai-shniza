import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import replicate
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# --- FSM ---
class ImageGenState(StatesGroup):
    SELECTING_ASPECT = State()
    SELECTING_STYLE = State()
    AWAITING_PROMPT = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def aspect_ratio_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1:1", callback_data="ideogram_aspect_1:1"),
            InlineKeyboardButton(text="9:16", callback_data="ideogram_aspect_2:3"),
            InlineKeyboardButton(text="16:9", callback_data="ideogram_aspect_16:9"),
        ]
    ])

def style_type_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Auto", callback_data="ideogram_style_auto"),
            InlineKeyboardButton(text="General", callback_data="ideogram_style_general"),
            InlineKeyboardButton(text="Anime", callback_data="ideogram_style_anime"),
        ],
        [
            InlineKeyboardButton(text="Realistic", callback_data="ideogram_style_realistic"),
            InlineKeyboardButton(text="Design", callback_data="ideogram_style_design"),
            InlineKeyboardButton(text="Render 3D", callback_data="ideogram_style_render3d"),
        ]
    ])

# --- /start ---
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üñº Ideogram V2 Turbo ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n\n"
        "üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω\n"
        "- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –ü—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        "- üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: –±–µ—Å–ø–ª–∞—Ç–Ω–æ (–∏–ª–∏ —É–∫–∞–∂–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–Ω–æ)\n\n"
    )
    await message.answer(welcome_text, parse_mode="Markdown")

    # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    await state.set_state(ImageGenState.SELECTING_ASPECT)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=aspect_ratio_kb()
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω ---
async def handle_aspect_ideogram(callback: CallbackQuery, state: FSMContext):
    aspect = callback.data.replace("ideogram_aspect_", "")
    await state.update_data(aspect_ratio=aspect)
    await callback.message.edit_text(
        f"‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: {aspect}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å:",
        reply_markup=style_type_kb()
    )
    await state.set_state(ImageGenState.SELECTING_STYLE)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è ---
async def handle_style_aspect_ideogram(callback: CallbackQuery, state: FSMContext):
    style = callback.data.replace("ideogram_style_", "")
    await state.update_data(style=style)
    await callback.message.edit_text(
        f"‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style}\n\n‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."
    )
    await state.set_state(ImageGenState.AWAITING_PROMPT)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ prompt ---
async def handle_prompt_aspect_ideogram(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    user_data = await state.get_data()
    aspect_ratio = user_data.get("aspect_ratio", "1:1")
    style = user_data.get("style", "auto")

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    try:
        replicate.api_token = REPLICATE_API_TOKEN

        prediction = await replicate.predictions.async_create(
            model="ideogram-ai/ideogram-v2-turbo",
            input={
                "prompt": prompt,
                "aspect_ratio": aspect_ratio,
                "style": style
            }
        )

        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status != "succeeded" or not prediction.output:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        image_url = prediction.output[0] if isinstance(prediction.output, list) else prediction.output
        await message.answer_photo(image_url, caption=f"‚úÖ Prompt: {prompt}")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

    await state.clear()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(handle_aspect_ideogram, F.data.startswith("ideogram_aspect_"), StateFilter(ImageGenState.SELECTING_ASPECT))
    dp.callback_query.register(handle_style_aspect_ideogram, F.data.startswith("ideogram_style_"), StateFilter(ImageGenState.SELECTING_STYLE))
    dp.message.register(handle_prompt_aspect_ideogram, StateFilter(ImageGenState.AWAITING_PROMPT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
