import os
import logging
import asyncio
import replicate
import aiohttp
import ffmpeg

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from keyboards import (
    MAIN_MENU_BUTTON_TEXT,
    main_menu_kb,
    universal_back_kb,
    chatterbox_menu_kb,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class VoiceGenState(StatesGroup):
    CHOOSE_TEMPERATURE = State()
    CHOOSE_SEED = State()
    AWAITING_TEXT = State()

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
def temperature_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π (0.2)", callback_data="temp_0.2")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π (0.5)", callback_data="temp_0.5")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π (0.8)", callback_data="temp_0.8")]
    ])

def seed_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 1", callback_data="seed_0")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 2", callback_data="seed_42")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 3", callback_data="seed_123")]
    ])

# /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    try:
        photo = FSInputFile("welcome.jpg")
        await message.answer_photo(photo, caption="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chatterbox!")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Å welcome.jpg: {e}")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Chatterbox!")

    await message.answer(
        "üß† –¢—ã –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å **Chatterbox** ‚Äî –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞, "
        "–∏–º–∏—Ç–∏—Ä—É—è –∂–∏–≤—É—é —Ä–µ—á—å —Å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ —ç–º–æ—Ü–∏–π –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏.\n\n"
        "üìå **–í–∞–∂–Ω–æ:**\n"
        "- –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç **—Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**\n"
        "- –û–∑–≤—É—á–∫–∞ **–±–µ—Å–ø–ª–∞—Ç–Ω–∞**\n"
        "- –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å **–ø–æ–ª —á—Ç–µ—Ü–∞**, –¥–æ–±–∞–≤—å –∫ –Ω–∞—á–∞–ª—É —Ç–µ–∫—Å—Ç–∞:\n"
        "  üëâ `Male voice:` –∏–ª–∏ `Female voice:`\n\n"
        "üéõ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=temperature_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.CHOOSE_TEMPERATURE)

# temperature
async def choose_temperature(callback: CallbackQuery, state: FSMContext):
    temperature = float(callback.data.split("_")[1])
    await state.update_data(temperature=temperature)
    await callback.message.edit_text(
        "üé≤ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):",
        reply_markup=seed_keyboard()
    )
    await state.set_state(VoiceGenState.CHOOSE_SEED)
    await callback.answer()

# seed
async def choose_seed(callback: CallbackQuery, state: FSMContext):
    seed = int(callback.data.split("_")[1])
    await state.update_data(seed=seed)
    await callback.message.edit_text(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `Hello! I‚Äôm your friendly voice bot.`",
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.AWAITING_TEXT)

# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
async def handle_voice_text(message: Message, state: FSMContext):
    if message.text == MAIN_MENU_BUTTON_TEXT:
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_kb())
        return

    if message.text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é":
        await cmd_start(message, state)
        return

    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.", reply_markup=universal_back_kb())
        return

    await message.answer("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏...")

    replicate.api_token = REPLICATE_API_TOKEN
    data = await state.get_data()
    temperature = data.get("temperature", 0.5)
    seed = data.get("seed", 0)

    try:
        output = replicate.run(
            "resemble-ai/chatterbox",
            input={
                "prompt": text,
                "seed": seed,
                "cfg_weight": 0.5,
                "temperature": temperature,
                "exaggeration": 0.5
            }
        )

        if isinstance(output, str):
            audio_url = output
        elif isinstance(output, list) and output:
            audio_url = output[0]
        elif isinstance(output, dict) and "audio_url" in output:
            audio_url = output["audio_url"]
        else:
            raise ValueError("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å URL –∞—É–¥–∏–æ")

        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                with open("output.wav", "wb") as f:
                    f.write(await resp.read())

        (
            ffmpeg
            .input("output.wav")
            .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
            .overwrite_output()
            .run()
        )

        voice = FSInputFile("voice.ogg")
        await message.answer_voice(voice, reply_markup=chatterbox_menu_kb())

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.", reply_markup=chatterbox_menu_kb())
    finally:
        for f in ["output.wav", "voice.ogg"]:
            if os.path.exists(f):
                os.remove(f)

    await state.clear()

# "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ
async def go_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_kb())

# main()
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # üü¢ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –õ–Æ–ë–û–ï —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    dp.message.register(go_main_menu, F.text == MAIN_MENU_BUTTON_TEXT, StateFilter("*"))

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(choose_temperature, F.data.startswith("temp_"), StateFilter(VoiceGenState.CHOOSE_TEMPERATURE))
    dp.callback_query.register(choose_seed, F.data.startswith("seed_"), StateFilter(VoiceGenState.CHOOSE_SEED))
    dp.message.register(handle_voice_text, StateFilter(VoiceGenState.AWAITING_TEXT))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
