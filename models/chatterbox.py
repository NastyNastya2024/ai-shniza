import os
import logging
import asyncio
import replicate
import aiohttp
import ffmpeg
import uuid

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from sqlalchemy import select
from sqlalchemy.exc import NoResultFound
from database.db import async_session
from database.models import User, PaymentRecord

from keyboards import main_menu_kb

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

class VoiceGenState(StatesGroup):
    CHOOSE_TEMPERATURE = State()
    CHOOSE_SEED = State()
    AWAITING_TEXT = State()
    CONFIRM_GENERATION = State()

# –ö–Ω–æ–ø–∫–∏
def temperature_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π (0.2)", callback_data="temp_0.2")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π (0.5)", callback_data="temp_0.5")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π (0.8)", callback_data="temp_0.8")]
    ])

def seed_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 1", callback_data="seed_0")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 2", callback_data="seed_42")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 3", callback_data="seed_123")]
    ])

def confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data="confirm_generation")]
    ])

# –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö (float)
def calculate_chatterbox_price() -> float:
    return 10.0

# –ë–∞–ª–∞–Ω—Å
async def get_user_balance(user_id: int) -> float:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if user is None:
            user = User(telegram_id=user_id, balance=0)
            session.add(user)
            await session.commit()
            return 0.0
        return float(user.balance)

async def deduct_user_balance(user_id: int, amount: float) -> bool:
    async with async_session() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalars().first()
        if user and user.balance >= amount:
            user.balance -= amount
            session.add(user)
            session.add(PaymentRecord(
                user_id=user.id,
                amount=amount,
                payment_id=str(uuid.uuid4()),
                status="succeeded"
            ))
            await session.commit()
            return True
        return False

# /start
async def cmd_start_chatterbox(message: Message, state: FSMContext):
    await message.answer(
        "üó£Ô∏è Voice Generator Bot –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Chatterbox** ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—á–∏ –ø–æ —Ç–µ–∫—Å—Ç—É.\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ:—Ç–µ–∫—Å—Ç ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {calculate_chatterbox_price():.2f} ‚ÇΩ –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é",
        reply_markup=temperature_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.CHOOSE_TEMPERATURE)

# –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
async def choose_temperature_chatterbox(callback: CallbackQuery, state: FSMContext):
    temperature = float(callback.data.split("_")[1])
    await state.update_data(temperature=temperature)
    await callback.message.edit_text(
        "üé≤ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å:",
        reply_markup=seed_keyboard()
    )
    await state.set_state(VoiceGenState.CHOOSE_SEED)
    await callback.answer()

# Seed
async def choose_seed_chatterbox(callback: CallbackQuery, state: FSMContext):
    seed = int(callback.data.split("_")[1])
    await state.update_data(seed=seed)
    await callback.message.edit_text(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.AWAITING_TEXT)

# –¢–µ–∫—Å—Ç
async def handle_voice_text_chatterbox(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    price = calculate_chatterbox_price()
    balance = await get_user_balance(message.from_user.id)

    if balance < price:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:.2f} ‚ÇΩ\n üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ.\n –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –ë–∞–ª–∞–Ω—Å")
        await state.clear()
        return

    await state.update_data(prompt=text, price=price, is_confirmed=False)
    await message.answer(
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {price:.2f} ‚ÇΩ\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:",
        reply_markup=confirm_keyboard()
    )
    await state.set_state(VoiceGenState.CONFIRM_GENERATION)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def confirm_generation_chatterbox(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    if data.get("is_confirmed"):
        return

    await state.update_data(is_confirmed=True)
    await callback.message.edit_reply_markup(reply_markup=None)

    user_id = callback.from_user.id
    if not await deduct_user_balance(user_id, data["price"]):
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞.")
        await state.clear()
        return

    await callback.message.edit_text("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    try:
        replicate.api_token = REPLICATE_API_TOKEN
        prediction = await replicate.predictions.async_create(
            model="resemble-ai/chatterbox",
            input={
                "prompt": data["prompt"],
                "seed": data.get("seed", 0),
                "cfg_weight": 0.5,
                "temperature": data.get("temperature", 0.5),
                "exaggeration": 0.5
            }
        )

        while prediction.status not in ("succeeded", "failed"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status != "succeeded":
            raise Exception(f"–ú–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {prediction.status}")

        audio_url = prediction.output
        if not isinstance(audio_url, str) or not audio_url.startswith("http"):
            raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –∞—É–¥–∏–æ")

        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                with open("output.wav", "wb") as f:
                    f.write(await resp.read())

        (
            ffmpeg
            .input("output.wav")
            .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
            .overwrite_output()
            .run()
        )

        voice = FSInputFile("voice.ogg")
        await callback.message.answer_voice(voice)

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
    finally:
        for f in ["output.wav", "voice.ogg"]:
            if os.path.exists(f):
                os.remove(f)
        await state.clear()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def go_main_menu_chatterbox(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu_kb())

# Main
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(go_main_menu_chatterbox, F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", StateFilter("*"))
    dp.message.register(cmd_start_chatterbox, Command("start"))
    dp.callback_query.register(choose_temperature_chatterbox, F.data.startswith("temp_"), StateFilter(VoiceGenState.CHOOSE_TEMPERATURE))
    dp.callback_query.register(choose_seed_chatterbox, F.data.startswith("seed_"), StateFilter(VoiceGenState.CHOOSE_SEED))
    dp.message.register(handle_voice_text_chatterbox, StateFilter(VoiceGenState.AWAITING_TEXT))
    dp.callback_query.register(confirm_generation_chatterbox, F.data == "confirm_generation", StateFilter(VoiceGenState.CONFIRM_GENERATION))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())