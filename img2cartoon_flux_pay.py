import os
import logging
import asyncio
import random

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import replicate
from dotenv import load_dotenv

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s"
)
logger = logging.getLogger("tg_bot")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class FluxKontextState(StatesGroup):
    WAITING_IMAGE = State()
    WAITING_ASPECT_RATIO = State()
    WAITING_STYLE_TYPE = State()
    WAITING_SAFETY_TOLERANCE = State()
    WAITING_PROMPT = State()

# --- –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ---
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    text = (
        "üé¨ *Cartoon Video Bot* –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Flux Kontext** ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞.\n\n"
        "üìã *–ß—Ç–æ —É–º–µ–µ—Ç:*\n"
        "- –ú—É–ª—å—Ç—è—à–Ω—ã–µ —Å—Ç–∏–ª–∏ (Pixar, Anime, Disney –∏ –¥—Ä.)\n"
        "- –ö–∞–º–µ—Ä–∞, –¥–≤–∏–∂–µ–Ω–∏–µ, —Å—é–∂–µ—Ç\n"
        "- –§–æ–Ω—ã –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –ü—Ä–æ–º–ø—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ) ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "- üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~$1.2 –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"
    )

    await message.answer(text, parse_mode="Markdown")
    await message.answer("üìå –ü—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.")
    await state.set_state(FluxKontextState.WAITING_IMAGE)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
async def handle_image_flux(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"
    await state.update_data(image_url=image_url)

    # –ö–Ω–æ–ø–∫–∏ aspect ratio
    aspect_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1:1", callback_data="aspect_1:1"),
            InlineKeyboardButton(text="16:9", callback_data="aspect_16:9"),
            InlineKeyboardButton(text="9:16", callback_data="aspect_9:16")
        ]
    ])

    await message.answer("üìê –í—ã–±–µ—Ä–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (Aspect Ratio):", reply_markup=aspect_kb)
    await state.set_state(FluxKontextState.WAITING_ASPECT_RATIO)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ aspect ratio ---
async def handle_aspect_ratio(callback: CallbackQuery, state: FSMContext):
    aspect_ratio = callback.data.replace("aspect_", "")
    await state.update_data(aspect_ratio=aspect_ratio)

    # –ö–Ω–æ–ø–∫–∏ style type
    style_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="Auto", callback_data="style_auto"),
            InlineKeyboardButton(text="General", callback_data="style_general"),
            InlineKeyboardButton(text="Realistic", callback_data="style_realistic"),
        ],
        [
            InlineKeyboardButton(text="Design", callback_data="style_design"),
            InlineKeyboardButton(text="Render 3D", callback_data="style_render3d"),
            InlineKeyboardButton(text="Anime", callback_data="style_anime"),
        ]
    ])

    await callback.message.edit_text("üé® –í—ã–±–µ—Ä–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å:", reply_markup=style_kb)
    await state.set_state(FluxKontextState.WAITING_STYLE_TYPE)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ style type ---
async def handle_style_type(callback: CallbackQuery, state: FSMContext):
    style = callback.data.replace("style_", "")
    await state.update_data(style_type=style)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 (–ú–∏–Ω–∏–º—É–º)", callback_data="safety_1"),
            InlineKeyboardButton(text="2 (–°—Ç–∞–Ω–¥–∞—Ä—Ç)", callback_data="safety_2"),
            InlineKeyboardButton(text="3 (–ú–∞–∫—Å–∏–º—É–º)", callback_data="safety_3"),
        ]
    ])

    await callback.message.edit_text("üõ° –í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Safety Tolerance):", reply_markup=kb)
    await state.set_state(FluxKontextState.WAITING_SAFETY_TOLERANCE)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ---
async def handle_safety_tolerance(callback: CallbackQuery, state: FSMContext):
    tolerance = int(callback.data.replace("safety_", ""))
    await state.update_data(safety_tolerance=tolerance)

    cartoon_styles = [
        "90s Arcade Style", "Disney Style", "Tim Burton Style", "Pixar Toy Look",
        "Sci-Fi Animation", "Anime Fantasy", "Animal Cartoon",
        "Dark Comic", "Noir Detective", "Studio Ghibli\n\n",
        "üìù *–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞:*\n_Make this a 90s cartoon_"
    ]
    style_list = "\n".join(f"- {s}" for s in cartoon_styles)

    await callback.message.edit_text(
        f"‚ú® –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (prompt).\n\n"
        f"*–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π:*\n{style_list}",
        parse_mode="Markdown"
    )
    await state.set_state(FluxKontextState.WAITING_PROMPT)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ---
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    data = await state.get_data()
    image_url = data.get("image_url")
    aspect_ratio = data.get("aspect_ratio", "match_input_image")
    safety_tolerance = data.get("safety_tolerance", 2)
    style_type = data.get("style_type", "auto")

    if not image_url:
        await message.answer("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        client = replicate.Client(api_token=REPLICATE_API_TOKEN)
        seed = random.randint(0, 2**31 - 1)

        prediction = client.predictions.create(
            version="black-forest-labs/flux-kontext-pro",
            input={
                "prompt": prompt,
                "input_image": image_url,
                "aspect_ratio": aspect_ratio,
                "output_format": "jpg",
                "safety_tolerance": safety_tolerance,
                "seed": seed,
                "style": style_type
            }
        )

        logger.info(f"[handle_prompt] Prediction created: {prediction.id}")
        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction.reload()
            logger.info(f"[handle_prompt] Status: {prediction.status}")

        if prediction.status == "succeeded" and prediction.output:
            output = prediction.output
            image_result_url = output if isinstance(output, str) else output[0]
            await message.answer_photo(image_result_url, caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\nüî§ *Prompt:* {prompt}", parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            logger.error(f"[handle_prompt] Generation failed. Status: {prediction.status}, Output: {prediction.output}")

    except Exception:
        logger.exception("[handle_prompt] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    
    await state.clear()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_image_flux, StateFilter(FluxKontextState.WAITING_IMAGE))
    dp.callback_query.register(handle_aspect_ratio, StateFilter(FluxKontextState.WAITING_ASPECT_RATIO))
    dp.callback_query.register(handle_style_type, StateFilter(FluxKontextState.WAITING_STYLE_TYPE))
    dp.callback_query.register(handle_safety_tolerance, StateFilter(FluxKontextState.WAITING_SAFETY_TOLERANCE))
    dp.message.register(handle_prompt, StateFilter(FluxKontextState.WAITING_PROMPT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
