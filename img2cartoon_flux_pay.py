import os
import asyncio
import logging
import replicate
import aiohttp
import ffmpeg
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class VoiceGenState(StatesGroup):
    WAITING_TEXT = State()

# –•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç–∞
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –æ–∑–≤—É—á—É –µ–≥–æ.")
    await state.set_state(VoiceGenState.WAITING_TEXT)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞
async def handle_voice_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    await message.answer("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏...")

    replicate.api_token = REPLICATE_API_TOKEN

    try:
        prediction = await replicate.predictions.async_create(
            model="resemble-ai/chatterbox",
            input={
                "prompt": text,
                "seed": 0,
                "cfg_weight": 0.5,
                "temperature": 0.8,
                "exaggeration": 0.5,
            }
        )

        logger.info(f"[handle_voice_text] Prediction created: {prediction.id}")

        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        while prediction.status not in ("succeeded", "failed", "canceled"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)
            logger.info(f"[handle_voice_text] Status: {prediction.status}")

        if prediction.status == "succeeded" and prediction.output:
            output = prediction.output
            logger.info(f"[handle_voice_text] Output: {output}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
            if isinstance(output, str) and output.startswith("http"):
                audio_url = output
            elif isinstance(output, list) and output and isinstance(output[0], str) and output[0].startswith("http"):
                audio_url = output[0]
            else:
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ –≤—ã–≤–æ–¥–∞: {output}")

            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            async with aiohttp.ClientSession() as session:
                async with session.get(audio_url) as resp:
                    if resp.status != 200:
                        raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: HTTP {resp.status}")
                    with open("output.wav", "wb") as f:
                        f.write(await resp.read())

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ .ogg
            (
                ffmpeg
                .input("output.wav")
                .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
                .overwrite_output()
                .run()
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            voice = FSInputFile("voice.ogg")
            await message.answer_voice(voice)

        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.error(f"[handle_voice_text] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. Status: {prediction.status}, Output: {prediction.output}")

    except Exception as e:
        logger.exception("[handle_voice_text] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏.")
    finally:
        if os.path.exists("output.wav"): os.remove("output.wav")
        if os.path.exists("voice.ogg"): os.remove("voice.ogg")

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        raise EnvironmentError("BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env")

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_voice_text, F.text, state=VoiceGenState.WAITING_TEXT)

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
