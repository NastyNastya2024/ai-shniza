import os
import asyncio
import logging
import replicate
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ Replicate
replicate.api_token = REPLICATE_API_TOKEN

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM —Å –Ω–æ–≤—ã–º–∏ —à–∞–≥–∞–º–∏
class KlingVideoState(StatesGroup):
    waiting_image = State()
    waiting_mode = State()
    waiting_duration = State()
    waiting_prompt = State()

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–æ—Å—å–±–∞ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í–∏–¥–µ–æ-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ **Kling** - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –≤–∏–¥–µ–æ.\n\n"
        "üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ –ø–ª–∞–≤–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "- –ö–∞–º–µ—Ä–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø—Ä–æ–ª—ë—Ç–∞ –∏ —Å–º–µ–Ω—ã —Ä–∞–∫—É—Ä—Å–æ–≤\n"
        "- –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "üí∞ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî ~$1.2\n\n"
        "üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å."
    )
    await state.set_state(KlingVideoState.waiting_image)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
async def handle_image(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    image_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

    await state.update_data(image_url=image_url)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üéõ Mode: Standard", callback_data="mode_standard"),
            InlineKeyboardButton(text="üéõ Mode: Pro", callback_data="mode_pro"),
        ]
    ])

    await message.answer("‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await state.set_state(KlingVideoState.waiting_mode)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ ‚Äî –∑–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def handle_mode_selection(callback_query: CallbackQuery, state: FSMContext):
    mode = callback_query.data.replace("mode_", "")
    await state.update_data(mode=mode)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚è± Duration: 5s", callback_data="duration_5"),
            InlineKeyboardButton(text="‚è± Duration: 10s", callback_data="duration_10"),
        ]
    ])

    await callback_query.message.edit_text("–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:", reply_markup=keyboard)
    await state.set_state(KlingVideoState.waiting_duration)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –∑–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è (prompt)
async def handle_duration_selection(callback_query: CallbackQuery, state: FSMContext):
    duration = int(callback_query.data.replace("duration_", ""))
    await state.update_data(duration=duration)

    await callback_query.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã (prompt) –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ."
    )
    await state.set_state(KlingVideoState.waiting_prompt)
    await callback_query.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (prompt) –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    data = await state.get_data()
    image_url = data.get("image_url")
    mode = data.get("mode", "standard")
    duration = data.get("duration", 5)

    if not image_url:
        await message.answer("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /start")
        return

    await message.answer("üé• –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç.")

    try:
        prediction = await replicate.predictions.async_create(
            model="kwaivgi/kling-v2.1",
            input={
                "mode": mode,
                "prompt": prompt,
                "duration": duration,
                "start_image": image_url,
                "negative_prompt": ""
            }
        )
        logger.info(f"–°–æ–∑–¥–∞–Ω prediction: {prediction.id}")

        while prediction.status not in ("succeeded", "failed"):
            logger.info(f"Status: {prediction.status} ‚Äî –∂–¥–µ–º 3 —Å–µ–∫...")
            await asyncio.sleep(3)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status == "succeeded":
            output = prediction.output
            video_url = None

            if isinstance(output, str) and output.startswith("http"):
                video_url = output
            elif isinstance(output, list):
                video_url = next((url for url in output if isinstance(url, str) and url.startswith("http")), None)

            if video_url:
                await message.answer_video(video_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç —Ç–≤–æ–µ –≤–∏–¥–µ–æ.")
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: {output}")
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {prediction.error}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_image, StateFilter(KlingVideoState.waiting_image))
    dp.callback_query.register(handle_mode_selection, lambda c: c.data.startswith("mode_"), StateFilter(KlingVideoState.waiting_mode))
    dp.callback_query.register(handle_duration_selection, lambda c: c.data.startswith("duration_"), StateFilter(KlingVideoState.waiting_duration))
    dp.message.register(handle_prompt, StateFilter(KlingVideoState.waiting_prompt))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
