import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from models.gpt import (
    PromptTranslationState, 
    cmd_start as gpt_start, 
    handle_russian_prompt
)
from models.imagegen4 import ImageGenState
from models.kling import (
    KlingVideoState,
    cmd_start as kling_start,
    handle_image,
    handle_mode_selection,
    handle_duration_selection,
    handle_prompt,
    handle_confirm_generation
)
from models.minimax import (
    VideoGenState,
    cmd_start as minimax_start,
    handle_image as minimax_handle_image,
    handle_prompt as minimax_handle_prompt,
    confirm_generation as minimax_confirm_generation
)
from models.musicgen import (
    MusicGenStates,
    start_handler as musicgen_start,
    model_chosen,
    normalization_chosen,
    receive_prompt
)

from models.seedance import (
    VideoGenState as SeedanceState,
    cmd_start as seedance_start,
    handle_image as seedance_handle_image,
    handle_prompt as seedance_handle_prompt,
    handle_duration,
    handle_resolution,
    handle_aspect_ratio,
    handle_camera_fixed,
    handle_confirm_generation
)
from models.veo3 import (
    Veo3State,
    cmd_start as veo3_start,
    handle_prompt as veo3_handle_prompt,
    confirm_generation as veo3_confirm_generation
)



# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class MenuState(StatesGroup):
    generation = State()
    image_menu = State()
    image_text_menu = State()
    video_menu = State()
    video_image_menu = State()
    music_menu = State()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def main_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")],
        [KeyboardButton(text="üî§ –ü–µ—Ä–µ–≤–æ–¥")],
        [KeyboardButton(text="üìä –ë–∞–ª–∞–Ω—Å")]
    ], resize_keyboard=True)


def generation_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞"), KeyboardButton(text="üé¨ –í–∏–¥–µ–æ")],
        [KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)


def image_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üñã –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")],
        [KeyboardButton(text="üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)


def image_text_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="Ideogram.py"), KeyboardButton(text="Imagegen4.py")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def video_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="üìÑ –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞")],
        [KeyboardButton(text="üñº –í–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def video_image_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="Kling"), KeyboardButton(text="Minimax")],
        [KeyboardButton(text="Seedance")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def music_menu_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text="MusicMax"), KeyboardButton(text="MusicGen")],
        [KeyboardButton(text="Chatterbox")],
        [KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

# === –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π ===
from models import (
    ideogram,
    imagegen4,
    flux,
    veo3,
    kling,
    minimax,
    seedance,
    musicgen,
    chatterbox,
    gpt
)

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä ===
router = Router()

# === –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ===
@router.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    try:
        photo = InputFile("welcome.jpg")
        await message.answer_photo(photo, caption=f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ welcome.jpg: {e}")
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n(–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())
    await state.clear()

@router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=main_menu_kb())

@router.message(F.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def generation_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.generation)
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=generation_kb())

@router.message(F.text == "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞")
async def image_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.image_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:", reply_markup=image_menu_kb())

@router.message(F.text == "üñã –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
async def image_text_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.image_text_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=image_text_menu_kb())

@router.message(F.text == "Ideogram.py")
async def run_ideogram_menu(message: Message, state: FSMContext):
    await ideogram.cmd_start(message, state)

@router.message(F.text == "Imagegen4.py")
async def run_imagegen4(message: Message, state: FSMContext):
    await imagegen4.cmd_start(message, state)

@router.message(F.text == "üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
async def run_flux(message: Message, state: FSMContext):
    await flux.cmd_start(message, state)

@router.message(F.text == "üé¨ –í–∏–¥–µ–æ")
async def video_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.video_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ:", reply_markup=video_menu_kb())

@router.message(F.text == "üìÑ –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞")
async def run_veo3(message: Message, state: FSMContext):
    await veo3.cmd_start(message, state)

@router.message(F.text == "üñº –í–∏–¥–µ–æ –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
async def video_img_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.video_image_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=video_image_menu_kb())

@router.message(F.text == "Kling")
async def run_kling(message: Message, state: FSMContext):
    await kling.cmd_start(message, state)

@router.message(F.text == "Minimax")
async def run_minimax(message: Message, state: FSMContext):
    await minimax.cmd_start(message, state)

@router.message(F.text == "Seedance")
async def run_seedance(message: Message, state: FSMContext):
    await seedance.cmd_start(message, state)

@router.message(F.text == "üéµ –ú—É–∑—ã–∫–∞")
async def music_menu(message: Message, state: FSMContext):
    await state.set_state(MenuState.music_menu)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=music_menu_kb())

@router.message(F.text == "MusicMax")
async def run_musicmax(message: Message, state: FSMContext):
    await musicmax.cmd_start(message, state)

@router.message(F.text == "MusicGen")
async def run_musicgen(message: Message, state: FSMContext):
    await musicgen.cmd_start(message, state)

@router.message(F.text == "Chatterbox")
async def run_chatterbox(message: Message, state: FSMContext):
    await chatterbox.cmd_start(message, state)

@router.message(F.text == "üî§ –ü–µ—Ä–µ–≤–æ–¥")
async def translate_dummy(message: Message):
    await message.answer("–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞: Hello ‚Üí –ü—Ä–∏–≤–µ—Ç")

@router.message(F.text == "üìä –ë–∞–ª–∞–Ω—Å")
async def balance_dummy(message: Message):
    await message.answer("–í–∞—à –±–∞–ª–∞–Ω—Å: 100 üí∞")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    if not BOT_TOKEN or not REPLICATE_API_TOKEN:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.include_router(router)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–æ–≤ –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Ideogram FSM
    dp.callback_query.register(
        ideogram.handle_aspect_ideogram,
        F.data.startswith("ideogram_aspect_"),
        StateFilter(ideogram.ImageGenState.SELECTING_ASPECT)
    )
    dp.callback_query.register(
        ideogram.handle_style_aspect_ideogram,
        F.data.startswith("ideogram_style_"),
        StateFilter(ideogram.ImageGenState.SELECTING_STYLE)
    )
    dp.message.register(
        ideogram.handle_prompt_aspect_ideogram,
        StateFilter(ideogram.ImageGenState.AWAITING_PROMPT)
    )
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ GPT FSM (–ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)
    dp.message.register(
        gpt_start,
        F.text == "üî§ –ü–µ—Ä–µ–≤–æ–¥"
    )
    dp.message.register(
        handle_russian_prompt,
        StateFilter(PromptTranslationState.WAITING_RU_PROMPT)
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–æ–≤ –∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Chatterbox FSM
    dp.message.register(
        chatterbox.cmd_start,
        F.text == "Chatterbox"
    )
    dp.callback_query.register(
        chatterbox.choose_temperature,
        F.data.startswith("temp_"),
        StateFilter(chatterbox.VoiceGenState.CHOOSE_TEMPERATURE)
    )
    dp.callback_query.register(
        chatterbox.choose_seed,
        F.data.startswith("seed_"),
        StateFilter(chatterbox.VoiceGenState.CHOOSE_SEED)
    )
    dp.message.register(
        chatterbox.handle_voice_text,
        StateFilter(chatterbox.VoiceGenState.AWAITING_TEXT)
    )
    
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Minimax FSM
    dp.message.register(
        minimax_start,
        F.text == "Minimax"
    )
    dp.message.register(
        minimax_handle_image,
        StateFilter(VideoGenState.waiting_image)
    )
    dp.message.register(
        minimax_handle_prompt,
        StateFilter(VideoGenState.waiting_prompt)
    )
    dp.callback_query.register(
        minimax_confirm_generation,
        F.data == "confirm_generation",
        StateFilter(VideoGenState.confirming_payment)
    )
    
        
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Seedance FSM
    dp.message.register(
        seedance_start,
        F.text == "Seedance"
    )
    dp.message.register(
        seedance_handle_image,
        StateFilter(SeedanceState.waiting_image)
    )
    dp.message.register(
        seedance_handle_prompt,
        StateFilter(SeedanceState.waiting_prompt)
    )
    dp.callback_query.register(
        handle_duration,
        StateFilter(SeedanceState.waiting_duration)
    )
    dp.callback_query.register(
        handle_resolution,
        StateFilter(SeedanceState.waiting_resolution)
    )
    dp.callback_query.register(
        handle_aspect_ratio,
        StateFilter(SeedanceState.waiting_aspect_ratio)
    )
    dp.callback_query.register(
        handle_camera_fixed,
        StateFilter(SeedanceState.waiting_camera_fixed)
    )
    dp.callback_query.register(
        handle_confirm_generation,
        F.data == "confirm_generation",
        StateFilter(SeedanceState.confirm_pending)
    )



    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Kling FSM
    dp.message.register(
        kling_start,
        F.text == "Kling"
    )
    dp.message.register(
        handle_image,
        StateFilter(KlingVideoState.waiting_image)
    )
    dp.callback_query.register(
        handle_mode_selection,
        F.data.startswith("mode_"),
        StateFilter(KlingVideoState.waiting_mode)
    )
    dp.callback_query.register(
        handle_duration_selection,
        F.data.startswith("duration_"),
        StateFilter(KlingVideoState.waiting_duration)
    )
    dp.message.register(
        handle_prompt,
        StateFilter(KlingVideoState.waiting_prompt)
    )
    dp.callback_query.register(
        handle_confirm_generation,
        F.data == "confirm_gen",
        StateFilter(KlingVideoState.confirm_pending)
    )
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ MusicGen FSM
    dp.message.register(
        musicgen_start,
        F.text == "MusicGen"
    )
    dp.callback_query.register(
        model_chosen,
        StateFilter(MusicGenStates.choosing_model)
    )
    dp.callback_query.register(
        normalization_chosen,
        StateFilter(MusicGenStates.choosing_normalization)
    )
    dp.message.register(
        receive_prompt,
        StateFilter(MusicGenStates.waiting_for_prompt)
    )
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ MusicGen FSM
    dp.message.register(
        musicgen_start,
        F.text == "MusicGen"
    )
    dp.callback_query.register(
        model_chosen,
        StateFilter(MusicGenStates.choosing_model)
    )
    dp.callback_query.register(
        normalization_chosen,
        StateFilter(MusicGenStates.choosing_normalization)
    )
    dp.message.register(
        receive_prompt,
        StateFilter(MusicGenStates.waiting_for_prompt)
    )
    
    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Veo3 FSM
    dp.message.register(
        veo3_start,
        F.text == "Veo3"
    )
    dp.message.register(
        veo3_handle_prompt,
        StateFilter(Veo3State.waiting_for_prompt)
    )
    dp.callback_query.register(
        veo3_confirm_generation,
        F.data == "confirm_generation",
        StateFilter(Veo3State.confirming_payment)
    )


    # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Flux FSM
    dp.message.register(
        flux.handle_image_flux,
        StateFilter(flux.FluxKontextState.WAITING_IMAGE)
    )
    dp.callback_query.register(
        flux.handle_aspect_ratio,
        F.data.startswith("aspect_"),
        StateFilter(flux.FluxKontextState.WAITING_ASPECT_RATIO)
    )
    dp.message.register(
        flux.handle_prompt,
        StateFilter(flux.FluxKontextState.WAITING_PROMPT)
    )

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
