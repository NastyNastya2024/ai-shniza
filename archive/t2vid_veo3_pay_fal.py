import asyncio
import logging
import os
from dotenv import load_dotenv

import fal_client
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
FAL_KEY = os.getenv("FAL_KEY")
IMGBB_API_KEY = os.getenv("IMGBB_API_KEY")
YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_API_KEY = os.getenv("YOOKASSA_API_KEY")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è fal_client
os.environ["FAL_API_KEY"] = FAL_KEY

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ ===
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class VideoGenStatesVeo3(StatesGroup):
    waiting_for_prompt = State()
    processing_video = State()
    video_ready = State()

# === /start –∫–æ–º–∞–Ω–¥–∞ ===
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç Veo 3", callback_data="vid_model_2")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é Veo 3:", reply_markup=keyboard)

# === –°—Ç–∞—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
async def start_veo3_generation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (prompt) –¥–ª—è –º–æ–¥–µ–ª–∏ Veo 3 –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    await state.set_state(VideoGenStatesVeo3.waiting_for_prompt)
    logger.info("üü¢ FSM Veo3: –æ–∂–∏–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç")

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç–∞) ===
async def handle_veo3_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if not prompt:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç.")
        return

    await state.update_data(prompt=prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé¨ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ (Veo3)", callback_data="generate_video_veo3")],
        [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_status_veo3")]
    ])
    await message.answer("üìã –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    await state.set_state(VideoGenStatesVeo3.processing_video)
    logger.info("üü¢ FSM Veo3: –æ–∂–∏–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–π")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ ===
def on_queue_update(update):
    if isinstance(update, fal_client.InProgress):
        for log in update.logs:
            logger.info(f"Veo3 in-progress: {log['message']}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ ===
async def generate_video_veo3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt")

    if not prompt:
        await callback.message.answer("‚ùå –ù–µ –≤–≤–µ–¥—ë–Ω –ø—Ä–æ–º–ø—Ç.")
        await state.clear()
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ —Å Veo 3. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    loop = asyncio.get_running_loop()
    try:
        result = await loop.run_in_executor(None, lambda: fal_client.subscribe(
            "fal-ai/veo3",
            arguments={
                "prompt": prompt,
                "aspect_ratio": "9:16",
                "duration": "8s",
                "enhance_prompt": True,
                "generate_audio": True
            },
            with_logs=True,
            on_queue_update=on_queue_update,
        ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Veo3: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ Veo3.")
        await state.clear()
        return

    video_url = None
    if isinstance(result, dict):
        video_url = (
            result.get("video_url") or
            (result.get("video") and result["video"].get("url")) or
            (result.get("output") and result["output"].get("video"))
        )

    if video_url:
        await callback.message.answer_video(video_url, caption="üéâ –í–∏–¥–µ–æ Veo3 –≥–æ—Ç–æ–≤–æ!")
        await state.update_data(video_url=video_url)
        await state.set_state(VideoGenStatesVeo3.video_ready)
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ Veo3.")
        await state.clear()

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ ===
async def check_status_veo3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    video_url = data.get("video_url")
    if video_url:
        await callback.message.answer_video(video_url, caption="‚úÖ –í–∏–¥–µ–æ Veo3 –≥–æ—Ç–æ–≤–æ.")
    else:
        await callback.message.answer("‚è≥ –í–∏–¥–µ–æ Veo3 –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–æ.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(start_veo3_generation, F.data == "vid_model_2")
    dp.message.register(handle_veo3_prompt, VideoGenStatesVeo3.waiting_for_prompt, F.text)
    dp.callback_query.register(generate_video_veo3, F.data == "generate_video_veo3", VideoGenStatesVeo3.processing_video)
    dp.callback_query.register(check_status_veo3, F.data == "check_status_veo3", VideoGenStatesVeo3.processing_video)

    await dp.start_polling(bot)

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    asyncio.run(main())
