import os
import logging
import asyncio
import replicate
import aiohttp
import ffmpeg

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

from bot.payments import has_enough_balance, deduct_balance
from bot.config import PRICE_CHATTERBOX

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class VoiceGenState(StatesGroup):
    CHOOSE_TEMPERATURE = State()
    CHOOSE_SEED = State()
    AWAITING_TEXT = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def temperature_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π (0.2)", callback_data="temp_0.2")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π (0.5)", callback_data="temp_0.5")],
        [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π (0.8)", callback_data="temp_0.8")]
    ])

def seed_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 1", callback_data="seed_0")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 2", callback_data="seed_42")],
        [InlineKeyboardButton(text="–°–ª—É—á–∞–π–Ω–æ—Å—Ç—å 3", callback_data="seed_123")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üß† –¢—ã –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å **Chatterbox** ‚Äî –æ–Ω–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ–∑–≤—É—á–∫–∏ —Ç–µ–∫—Å—Ç–∞, "
        "–∏–º–∏—Ç–∏—Ä—É—è –∂–∏–≤—É—é —Ä–µ—á—å —Å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ —ç–º–æ—Ü–∏–π –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏.\n\n"
        "üìå **–í–∞–∂–Ω–æ:**\n"
        "- –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç **—Ç–æ–ª—å–∫–æ —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ**\n"
        f"- –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {PRICE_CHATTERBOX:.2f}‚ÇΩ\n"
        "- –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å **–ø–æ–ª —á—Ç–µ—Ü–∞**, –¥–æ–±–∞–≤—å –∫ –Ω–∞—á–∞–ª—É —Ç–µ–∫—Å—Ç–∞:\n"
        "  üëâ `Male voice:` –∏–ª–∏ `Female voice:`\n\n"
        "üéõ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–æ–¥–∞—á–∏ —Ç–µ–∫—Å—Ç–∞:",
        reply_markup=temperature_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.CHOOSE_TEMPERATURE)

# –í—ã–±–æ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
async def choose_temperature(callback: CallbackQuery, state: FSMContext):
    temperature = float(callback.data.split("_")[1])
    await state.update_data(temperature=temperature)
    await callback.message.edit_text(
        "üé≤ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):",
        reply_markup=seed_keyboard()
    )
    await state.set_state(VoiceGenState.CHOOSE_SEED)
    await callback.answer()

# –í—ã–±–æ—Ä seed
async def choose_seed(callback: CallbackQuery, state: FSMContext):
    seed = int(callback.data.split("_")[1])
    await state.update_data(seed=seed)
    await callback.message.edit_text(
        "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å.\n\n"
        "–ü—Ä–∏–º–µ—Ä: `Hello! I‚Äôm your friendly voice bot.`",
        parse_mode="Markdown"
    )
    await state.set_state(VoiceGenState.AWAITING_TEXT)
    await callback.answer()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞
async def handle_voice_text(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()

    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    if not has_enough_balance(user_id):
        await message.answer(f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî {PRICE_CHATTERBOX:.2f}‚ÇΩ.")
        return

    await message.answer("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏...")

    replicate.api_token = REPLICATE_API_TOKEN
    data = await state.get_data()
    temperature = data.get("temperature", 0.5)
    seed = data.get("seed", 0)

    try:
        output = replicate.run(
            "resemble-ai/chatterbox",
            input={
                "prompt": text,
                "seed": seed,
                "cfg_weight": 0.5,
                "temperature": temperature,
                "exaggeration": 0.5
            }
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ
        audio_url = None
        if hasattr(output, "url"):
            audio_url = output.url
        elif isinstance(output, str):
            audio_url = output
        elif isinstance(output, list) and output:
            audio_url = output[0]
        elif isinstance(output, dict) and "audio_url" in output:
            audio_url = output["audio_url"]

        if not audio_url:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ")

        # –°–∫–∞—á–∏–≤–∞–µ–º .wav
        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                with open("output.wav", "wb") as f:
                    f.write(await resp.read())

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ .ogg
        (
            ffmpeg
            .input("output.wav")
            .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
            .overwrite_output()
            .run()
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        voice = FSInputFile("voice.ogg")
        await message.answer_voice(voice)

        # –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        deduct_balance(user_id)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
    finally:
        for file in ["output.wav", "voice.ogg"]:
            if os.path.exists(file):
                os.remove(file)

    await state.clear()

# –ó–∞–ø—É—Å–∫
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(choose_temperature, F.data.startswith("temp_"), StateFilter(VoiceGenState.CHOOSE_TEMPERATURE))
    dp.callback_query.register(choose_seed, F.data.startswith("seed_"), StateFilter(VoiceGenState.CHOOSE_SEED))
    dp.message.register(handle_voice_text, StateFilter(VoiceGenState.AWAITING_TEXT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
