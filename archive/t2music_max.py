import os
import logging
import asyncio
import replicate
import aiohttp
import ffmpeg

from replicate.helpers import FileOutput
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.types import (
    Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class VoiceGenState(StatesGroup):
    AWAITING_BITRATE = State()
    AWAITING_SAMPLE_RATE = State()
    AWAITING_TEXT = State()

# Inline-–∫–Ω–æ–ø–∫–∏ –±–∏—Ç—Ä–µ–π—Ç–∞
bitrate_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="32000 ‚Äî –Ω–∏–∑–∫–æ–µ", callback_data="bitrate_32000")],
        [InlineKeyboardButton(text="64000 ‚Äî —Å—Ä–µ–¥–Ω–µ–µ", callback_data="bitrate_64000")],
        [InlineKeyboardButton(text="128000 ‚Äî —Ö–æ—Ä–æ—à–µ–µ", callback_data="bitrate_128000")],
        [InlineKeyboardButton(text="256000 ‚Äî –≤—ã—Å–æ–∫–æ–µ", callback_data="bitrate_256000")],
    ]
)

# Inline-–∫–Ω–æ–ø–∫–∏ sample rate
sample_rate_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="16000 –ì—Ü ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π", callback_data="sr_16000")],
        [InlineKeyboardButton(text="24000 –ì—Ü ‚Äî —É–ª—É—á—à–µ–Ω–Ω—ã–π", callback_data="sr_24000")],
        [InlineKeyboardButton(text="32000 –ì—Ü ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π", callback_data="sr_32000")],
        [InlineKeyboardButton(text="44100 –ì—Ü ‚Äî CD –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="sr_44100")],
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–∏ MiniMax Music-01.\n\n"
        "üé∂ –ü—Ä–µ–≤—Ä–∞—â–∞—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ –æ–∑–≤—É—á–µ–Ω–Ω—É—é –º—É–∑—ã–∫—É .\n\n"
        "üìã –ß—Ç–æ —è —É–º–µ—é:\n"
        "- –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã \n\n"
        "‚ö†Ô∏è –í–ê–ñ–ù–û: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º –≤ —Å—Ç–∏–ª–µ –¥–∏—Å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n"
        "üéõ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å $0.2 (–∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ—Ç)",
        reply_markup=bitrate_kb
    )
    await state.set_state(VoiceGenState.AWAITING_BITRATE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–≤—ã–±–æ—Ä–∞ –±–∏—Ç—Ä–µ–π—Ç–∞
async def handle_bitrate_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    bitrate = int(callback.data.split("_")[1])
    await state.update_data(bitrate=bitrate)
    await callback.message.edit_text("–í—ã–±—Ä–∞–Ω–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç: {}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ sample rate:".format(bitrate), reply_markup=sample_rate_kb)
    await state.set_state(VoiceGenState.AWAITING_SAMPLE_RATE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–≤—ã–±–æ—Ä–∞ sample rate
async def handle_sample_rate_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    sample_rate = int(callback.data.split("_")[1])
    await state.update_data(sample_rate=sample_rate)
    await callback.message.edit_text(
    "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–±—Ä–∞–Ω—ã.\n\n"
    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å.\n\n"
)
    await state.set_state(VoiceGenState.AWAITING_TEXT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_voice_text(message: Message, state: FSMContext):
    data = await state.get_data()
    bitrate = data.get("bitrate", 256000)
    sample_rate = data.get("sample_rate", 44100)

    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    await message.answer("üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É...")

    replicate.api_token = REPLICATE_API_TOKEN

    try:
        output = replicate.run(
            "minimax/music-01",
            input={
                "lyrics": text,
                "bitrate": bitrate,
                "sample_rate": sample_rate,
                "song_file": "https://replicate.delivery/pbxt/M9zum1Y6qujy02jeigHTJzn0lBTQOemB7OkH5XmmPSC5OUoO/MiniMax-Electronic.wav"
            }
        )

        logger.info(f"RAW Output from replicate: {output} (type: {type(output)})")

        if isinstance(output, FileOutput):
            audio_url = str(output)
        elif isinstance(output, str):
            audio_url = output
        elif isinstance(output, list) and output:
            audio_url = output[0]
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ.")

        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                with open("output.mp3", "wb") as f:
                    f.write(await resp.read())

        (
            ffmpeg
            .input("output.mp3")
            .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
            .overwrite_output()
            .run()
        )

        voice = FSInputFile("voice.ogg")
        await message.answer_voice(voice)

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")
    finally:
        for file in ["output.mp3", "voice.ogg"]:
            if os.path.exists(file):
                os.remove(file)

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.callback_query.register(handle_bitrate_callback, F.data.startswith("bitrate_"))
    dp.callback_query.register(handle_sample_rate_callback, F.data.startswith("sr_"))
    dp.message.register(handle_voice_text, StateFilter(VoiceGenState.AWAITING_TEXT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
