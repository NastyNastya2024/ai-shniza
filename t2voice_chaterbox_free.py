import os
import logging
import asyncio
import replicate
import aiohttp
import ffmpeg

from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ImageGenState(StatesGroup):
    AWAITING_PROMPT = State()

class VoiceGenState(StatesGroup):
    AWAITING_TEXT = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –Ω–∞—á–∞–ª–æ\n/image ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n/voice ‚Äî –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /image
async def cmd_image(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    await state.set_state(ImageGenState.AWAITING_PROMPT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /voice
async def cmd_voice(message: Message, state: FSMContext):
    await message.answer("üó£ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º), –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å.")
    await state.set_state(VoiceGenState.AWAITING_TEXT)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def handle_image_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 15:
        await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await message.answer("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    replicate.api_token = REPLICATE_API_TOKEN

    try:
        prediction = await replicate.predictions.async_create(
            model="google/imagen-4",
            input={
                "prompt": prompt,
                "aspect_ratio": "9:16",
                "output_format": "png",
                "guidance_scale": 7.5,
                "num_inference_steps": 50,
            }
        )

        while prediction.status not in ("succeeded", "failed"):
            await asyncio.sleep(2)
            prediction = await replicate.predictions.async_get(prediction.id)

        if prediction.status == "succeeded":
            image_url = prediction.output[0]
            await message.answer_photo(image_url, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_voice_text(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 10:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
        return

    await message.answer("üé§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏...")

    replicate.api_token = REPLICATE_API_TOKEN
    try:
        output = replicate.run(
            "resemble-ai/chatterbox",
            input={
                "prompt": text,
                "seed": 0,
                "cfg_weight": 0.5,
                "temperature": 0.8,
                "exaggeration": 0.5
            }
        )
        logger.info(f"Output from replicate.run: {output} (type: {type(output)})")

        # –ü–æ–ª—É—á–∞–µ–º audio_url –∏–∑ –æ–±—ä–µ–∫—Ç–∞ output
        if hasattr(output, "url"):
            audio_url = output.url
        elif isinstance(output, str):
            audio_url = output
        elif isinstance(output, list) and output:
            audio_url = output[0]
        elif isinstance(output, dict) and "audio_url" in output:
            audio_url = output["audio_url"]
        else:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∞—É–¥–∏–æ –∏–∑ –≤—ã–≤–æ–¥–∞ –º–æ–¥–µ–ª–∏")

        logger.info(f"Audio URL: {audio_url}")

        # –°–∫–∞—á–∏–≤–∞–µ–º .wav —Ñ–∞–π–ª
        async with aiohttp.ClientSession() as session:
            async with session.get(audio_url) as resp:
                if resp.status != 200:
                    raise Exception("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ")
                with open("output.wav", "wb") as f:
                    f.write(await resp.read())

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ .ogg (Opus) –¥–ª—è Telegram voice
        (
            ffmpeg
            .input("output.wav")
            .output("voice.ogg", format='opus', audio_bitrate='64k', acodec='libopus')
            .overwrite_output()
            .run()
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ voice
        voice = FSInputFile("voice.ogg")
        await message.answer_voice(voice)

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏:")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ.")

    finally:
        if os.path.exists("output.wav"):
            os.remove("output.wav")
        if os.path.exists("voice.ogg"):
            os.remove("voice.ogg")

    await state.clear()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_image, Command("image"))
    dp.message.register(cmd_voice, Command("voice"))
    dp.message.register(handle_image_prompt, StateFilter(ImageGenState.AWAITING_PROMPT))
    dp.message.register(handle_voice_text, StateFilter(VoiceGenState.AWAITING_TEXT))

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
