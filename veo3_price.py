import os
import asyncio
import logging
import uuid
import replicate
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select
from sqlalchemy.exc import NoResultFound
from dotenv import load_dotenv

from database.db import async_session
from database.models import User, PaymentRecord

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

if not BOT_TOKEN or not REPLICATE_API_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ REPLICATE_API_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Replicate API
replicate.api_token = REPLICATE_API_TOKEN

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
class VideoGenState(StatesGroup):
    waiting_for_prompt = State()
    confirming_payment = State()
    processing = State()

# –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (–≤ —Ü–µ–Ω—Ç–∞—Ö)
GENERATION_COST = 600  # 6 –¥–æ–ª–ª–∞—Ä–æ–≤ = 600 —Ü–µ–Ω—Ç–æ–≤

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_balance(user_id: int) -> int:
    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == user_id))
            user = result.scalars().one()
            return int(user.balance)
        except NoResultFound:
            return 0

# –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
async def deduct_user_balance(user_id: int, amount: int) -> bool:
    async with async_session() as session:
        try:
            result = await session.execute(select(User).where(User.telegram_id == user_id))
            user = result.scalars().one()
            if user.balance >= amount:
                user.balance -= amount
                session.add(user)
                session.add(PaymentRecord(
                    user_id=user.id,
                    amount=amount,
                    payment_id=str(uuid.uuid4()),
                    status="succeeded"
                ))
                await session.commit()
                return True
            return False
        except NoResultFound:
            return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ú–æ–¥–µ–ª—å Veo3 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ —Å –∑–≤—É–∫–æ–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        "üí° –û–ø–∏—Å–∞–Ω–∏–µ (prompt) ‚Äî –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n"
        "üõ†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ 16:9 .\n"
        "üõ†Ô∏è –ó–≤—É–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é.\n"
        f"üí≤ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {GENERATION_COST / 100:.2f}$.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã."
    )
    await state.set_state(VideoGenState.waiting_for_prompt)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Å—Ü–µ–Ω—ã
async def handle_prompt(message: Message, state: FSMContext):
    prompt = message.text.strip()
    if len(prompt) < 15:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –º–∏–Ω–∏–º—É–º 15 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    user_id = message.from_user.id
    balance = await get_user_balance(user_id)

    if balance < GENERATION_COST:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {GENERATION_COST} —Ü–µ–Ω—Ç–æ–≤\n"
            f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ü–µ–Ω—Ç–æ–≤"
        )
        await state.clear()
        return

    await state.update_data(prompt=prompt)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ {GENERATION_COST} —Ü–µ–Ω—Ç–æ–≤", callback_data="confirm_generation")]
    ])
    await message.answer(
        f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ.\nüí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {GENERATION_COST} —Ü–µ–Ω—Ç–æ–≤\nüíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ü–µ–Ω—Ç–æ–≤",
        reply_markup=keyboard
    )
    await state.set_state(VideoGenState.confirming_payment)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
async def confirm_generation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    prompt = data.get("prompt")
    user_id = callback.from_user.id

    if not prompt:
        await callback.message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await state.clear()
        return

    success = await deduct_user_balance(user_id, GENERATION_COST)
    if not success:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    await callback.message.edit_text("üé¨ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

    try:
        output = replicate.run(
            "google/veo-3",
            input={
                "prompt": prompt,
                "enhance_prompt": True,
                "aspect_ratio": "9:16"
            }
        )
        video_url = output.url if hasattr(output, "url") else output
        logger.info(f"–í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {video_url}")
        await callback.message.answer_video(video_url, caption="‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.")

    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(handle_prompt, StateFilter(VideoGenState.waiting_for_prompt))
    dp.callback_query.register(confirm_generation, StateFilter(VideoGenState.confirming_payment), lambda c: c.data == "confirm_generation")

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
